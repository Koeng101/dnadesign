// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Calculate Mash Distance
	// (POST /align/mash)
	PostAlignMash(w http.ResponseWriter, r *http.Request)
	// Calculate Mash Distance Against Many Sequences
	// (POST /align/mash_many)
	PostAlignMashMany(w http.ResponseWriter, r *http.Request)
	// Perform Needleman-Wunsch Alignment
	// (POST /align/needleman_wunsch)
	PostAlignNeedlemanWunsch(w http.ResponseWriter, r *http.Request)
	// Perform Smith-Waterman Alignment
	// (POST /align/smith_waterman)
	PostAlignSmithWaterman(w http.ResponseWriter, r *http.Request)
	// Fix CDS
	// (POST /cds/fix)
	PostCdsFix(w http.ResponseWriter, r *http.Request)
	// Optimize CDS.
	// (POST /cds/optimize)
	PostCdsOptimize(w http.ResponseWriter, r *http.Request)
	// Translate CDS
	// (POST /cds/translate)
	PostCdsTranslate(w http.ResponseWriter, r *http.Request)
	// Fragment DNA for GoldenGate
	// (POST /cloning/fragment)
	PostCloningFragment(w http.ResponseWriter, r *http.Request)
	// Simulate GoldenGate assembly
	// (POST /cloning/golden_gate)
	PostCloningGoldenGate(w http.ResponseWriter, r *http.Request)
	// Simulate ligation
	// (POST /cloning/ligate)
	PostCloningLigate(w http.ResponseWriter, r *http.Request)
	// Simulate restriction digest
	// (POST /cloning/restriction_digest)
	PostCloningRestrictionDigest(w http.ResponseWriter, r *http.Request)
	// Add Two Codon Tables
	// (POST /codon_tables/add_tables)
	PostCodonTablesAddTables(w http.ResponseWriter, r *http.Request)
	// Create Compromise Codon Table
	// (POST /codon_tables/compromise_tables)
	PostCodonTablesCompromiseTables(w http.ResponseWriter, r *http.Request)
	// Get Default Organism Names
	// (GET /codon_tables/default_organisms)
	GetCodonTablesDefaultOrganisms(w http.ResponseWriter, r *http.Request)
	// Create Weighted Codon Table from Genbank Record
	// (POST /codon_tables/from_genbank)
	PostCodonTablesFromGenbank(w http.ResponseWriter, r *http.Request)
	// Get Codon Table for an Organism
	// (POST /codon_tables/get_organism_table)
	PostCodonTablesGetOrganismTable(w http.ResponseWriter, r *http.Request)
	// Create New Codon Table
	// (POST /codon_tables/new)
	PostCodonTablesNew(w http.ResponseWriter, r *http.Request)
	// Run a lua script
	// (POST /execute_lua)
	PostExecuteLua(w http.ResponseWriter, r *http.Request)
	// Contra Fold V2
	// (POST /folding/linearfold/contra_fold_v2)
	PostFoldingLinearfoldContraFoldV2(w http.ResponseWriter, r *http.Request)
	// Vienna RNA Fold
	// (POST /folding/linearfold/vienna_rna_fold)
	PostFoldingLinearfoldViennaRnaFold(w http.ResponseWriter, r *http.Request)
	// Zuker Folding
	// (POST /folding/zuker)
	PostFoldingZuker(w http.ResponseWriter, r *http.Request)
	// Parse FASTA data
	// (POST /io/fasta/parse)
	PostIoFastaParse(w http.ResponseWriter, r *http.Request)
	// Write FASTA data
	// (POST /io/fasta/write)
	PostIoFastaWrite(w http.ResponseWriter, r *http.Request)
	// Parse FASTQ data
	// (POST /io/fastq/parse)
	PostIoFastqParse(w http.ResponseWriter, r *http.Request)
	// Write FASTQ data
	// (POST /io/fastq/write)
	PostIoFastqWrite(w http.ResponseWriter, r *http.Request)
	// Parse Genbank data
	// (POST /io/genbank/parse)
	PostIoGenbankParse(w http.ResponseWriter, r *http.Request)
	// Write Genbank data
	// (POST /io/genbank/write)
	PostIoGenbankWrite(w http.ResponseWriter, r *http.Request)
	// Parse Pileup Data
	// (POST /io/pileup/parse)
	PostIoPileupParse(w http.ResponseWriter, r *http.Request)
	// Write Pileup Data
	// (POST /io/pileup/write)
	PostIoPileupWrite(w http.ResponseWriter, r *http.Request)
	// Parse slow5 Data
	// (POST /io/slow5/parse)
	PostIoSlow5Parse(w http.ResponseWriter, r *http.Request)
	// Compress Raw Signal with SVB
	// (POST /io/slow5/svb_compress)
	PostIoSlow5SvbCompress(w http.ResponseWriter, r *http.Request)
	// Decompress Raw Signal with SVB
	// (POST /io/slow5/svb_decompress)
	PostIoSlow5SvbDecompress(w http.ResponseWriter, r *http.Request)
	// Write slow5 Data
	// (POST /io/slow5/write)
	PostIoSlow5Write(w http.ResponseWriter, r *http.Request)
	// Simulate PCR
	// (POST /pcr/complex_pcr)
	PostPcrComplexPcr(w http.ResponseWriter, r *http.Request)
	// Generate De Bruijn sequence-based barcodes
	// (POST /pcr/primers/debruijn_barcodes)
	PostPcrPrimersDebruijnBarcodes(w http.ResponseWriter, r *http.Request)
	// Design PCR Primers
	// (POST /pcr/primers/design_primers)
	PostPcrPrimersDesignPrimers(w http.ResponseWriter, r *http.Request)
	// Calculate Melting Temperature using Marmur Doty method
	// (POST /pcr/primers/marmur_doty)
	PostPcrPrimersMarmurDoty(w http.ResponseWriter, r *http.Request)
	// Calculate Melting Temperature
	// (POST /pcr/primers/melting_temperature)
	PostPcrPrimersMeltingTemperature(w http.ResponseWriter, r *http.Request)
	// Calculate Melting Temperature using Santa Lucia method
	// (POST /pcr/primers/santa_lucia)
	PostPcrPrimersSantaLucia(w http.ResponseWriter, r *http.Request)
	// Simulate a simple PCR
	// (POST /pcr/simple_pcr)
	PostPcrSimplePcr(w http.ResponseWriter, r *http.Request)
	// Generate Random DNA Sequence
	// (POST /random/random_dna)
	PostRandomRandomDna(w http.ResponseWriter, r *http.Request)
	// Generate Random Protein Sequence
	// (POST /random/random_protein)
	PostRandomRandomProtein(w http.ResponseWriter, r *http.Request)
	// Generate Random RNA Sequence
	// (POST /random/random_rna)
	PostRandomRandomRna(w http.ResponseWriter, r *http.Request)
	// Sequence Hashing
	// (POST /seqhash)
	PostSeqhash(w http.ResponseWriter, r *http.Request)
	// Sequence Hashing for Fragment
	// (POST /seqhash_fragment)
	PostSeqhashFragment(w http.ResponseWriter, r *http.Request)
	// Check if Sequence is Palindromic
	// (POST /utils/is_palindromic)
	PostUtilsIsPalindromic(w http.ResponseWriter, r *http.Request)
	// Reverse Complement of DNA Sequence
	// (POST /utils/reverse_complement)
	PostUtilsReverseComplement(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Calculate Mash Distance
// (POST /align/mash)
func (_ Unimplemented) PostAlignMash(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Calculate Mash Distance Against Many Sequences
// (POST /align/mash_many)
func (_ Unimplemented) PostAlignMashMany(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Perform Needleman-Wunsch Alignment
// (POST /align/needleman_wunsch)
func (_ Unimplemented) PostAlignNeedlemanWunsch(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Perform Smith-Waterman Alignment
// (POST /align/smith_waterman)
func (_ Unimplemented) PostAlignSmithWaterman(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fix CDS
// (POST /cds/fix)
func (_ Unimplemented) PostCdsFix(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Optimize CDS.
// (POST /cds/optimize)
func (_ Unimplemented) PostCdsOptimize(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Translate CDS
// (POST /cds/translate)
func (_ Unimplemented) PostCdsTranslate(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fragment DNA for GoldenGate
// (POST /cloning/fragment)
func (_ Unimplemented) PostCloningFragment(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Simulate GoldenGate assembly
// (POST /cloning/golden_gate)
func (_ Unimplemented) PostCloningGoldenGate(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Simulate ligation
// (POST /cloning/ligate)
func (_ Unimplemented) PostCloningLigate(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Simulate restriction digest
// (POST /cloning/restriction_digest)
func (_ Unimplemented) PostCloningRestrictionDigest(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add Two Codon Tables
// (POST /codon_tables/add_tables)
func (_ Unimplemented) PostCodonTablesAddTables(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create Compromise Codon Table
// (POST /codon_tables/compromise_tables)
func (_ Unimplemented) PostCodonTablesCompromiseTables(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Default Organism Names
// (GET /codon_tables/default_organisms)
func (_ Unimplemented) GetCodonTablesDefaultOrganisms(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create Weighted Codon Table from Genbank Record
// (POST /codon_tables/from_genbank)
func (_ Unimplemented) PostCodonTablesFromGenbank(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Codon Table for an Organism
// (POST /codon_tables/get_organism_table)
func (_ Unimplemented) PostCodonTablesGetOrganismTable(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create New Codon Table
// (POST /codon_tables/new)
func (_ Unimplemented) PostCodonTablesNew(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Run a lua script
// (POST /execute_lua)
func (_ Unimplemented) PostExecuteLua(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Contra Fold V2
// (POST /folding/linearfold/contra_fold_v2)
func (_ Unimplemented) PostFoldingLinearfoldContraFoldV2(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Vienna RNA Fold
// (POST /folding/linearfold/vienna_rna_fold)
func (_ Unimplemented) PostFoldingLinearfoldViennaRnaFold(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Zuker Folding
// (POST /folding/zuker)
func (_ Unimplemented) PostFoldingZuker(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Parse FASTA data
// (POST /io/fasta/parse)
func (_ Unimplemented) PostIoFastaParse(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Write FASTA data
// (POST /io/fasta/write)
func (_ Unimplemented) PostIoFastaWrite(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Parse FASTQ data
// (POST /io/fastq/parse)
func (_ Unimplemented) PostIoFastqParse(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Write FASTQ data
// (POST /io/fastq/write)
func (_ Unimplemented) PostIoFastqWrite(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Parse Genbank data
// (POST /io/genbank/parse)
func (_ Unimplemented) PostIoGenbankParse(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Write Genbank data
// (POST /io/genbank/write)
func (_ Unimplemented) PostIoGenbankWrite(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Parse Pileup Data
// (POST /io/pileup/parse)
func (_ Unimplemented) PostIoPileupParse(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Write Pileup Data
// (POST /io/pileup/write)
func (_ Unimplemented) PostIoPileupWrite(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Parse slow5 Data
// (POST /io/slow5/parse)
func (_ Unimplemented) PostIoSlow5Parse(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Compress Raw Signal with SVB
// (POST /io/slow5/svb_compress)
func (_ Unimplemented) PostIoSlow5SvbCompress(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Decompress Raw Signal with SVB
// (POST /io/slow5/svb_decompress)
func (_ Unimplemented) PostIoSlow5SvbDecompress(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Write slow5 Data
// (POST /io/slow5/write)
func (_ Unimplemented) PostIoSlow5Write(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Simulate PCR
// (POST /pcr/complex_pcr)
func (_ Unimplemented) PostPcrComplexPcr(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Generate De Bruijn sequence-based barcodes
// (POST /pcr/primers/debruijn_barcodes)
func (_ Unimplemented) PostPcrPrimersDebruijnBarcodes(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Design PCR Primers
// (POST /pcr/primers/design_primers)
func (_ Unimplemented) PostPcrPrimersDesignPrimers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Calculate Melting Temperature using Marmur Doty method
// (POST /pcr/primers/marmur_doty)
func (_ Unimplemented) PostPcrPrimersMarmurDoty(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Calculate Melting Temperature
// (POST /pcr/primers/melting_temperature)
func (_ Unimplemented) PostPcrPrimersMeltingTemperature(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Calculate Melting Temperature using Santa Lucia method
// (POST /pcr/primers/santa_lucia)
func (_ Unimplemented) PostPcrPrimersSantaLucia(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Simulate a simple PCR
// (POST /pcr/simple_pcr)
func (_ Unimplemented) PostPcrSimplePcr(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Generate Random DNA Sequence
// (POST /random/random_dna)
func (_ Unimplemented) PostRandomRandomDna(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Generate Random Protein Sequence
// (POST /random/random_protein)
func (_ Unimplemented) PostRandomRandomProtein(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Generate Random RNA Sequence
// (POST /random/random_rna)
func (_ Unimplemented) PostRandomRandomRna(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Sequence Hashing
// (POST /seqhash)
func (_ Unimplemented) PostSeqhash(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Sequence Hashing for Fragment
// (POST /seqhash_fragment)
func (_ Unimplemented) PostSeqhashFragment(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Check if Sequence is Palindromic
// (POST /utils/is_palindromic)
func (_ Unimplemented) PostUtilsIsPalindromic(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Reverse Complement of DNA Sequence
// (POST /utils/reverse_complement)
func (_ Unimplemented) PostUtilsReverseComplement(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostAlignMash operation middleware
func (siw *ServerInterfaceWrapper) PostAlignMash(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAlignMash(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostAlignMashMany operation middleware
func (siw *ServerInterfaceWrapper) PostAlignMashMany(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAlignMashMany(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostAlignNeedlemanWunsch operation middleware
func (siw *ServerInterfaceWrapper) PostAlignNeedlemanWunsch(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAlignNeedlemanWunsch(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostAlignSmithWaterman operation middleware
func (siw *ServerInterfaceWrapper) PostAlignSmithWaterman(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAlignSmithWaterman(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostCdsFix operation middleware
func (siw *ServerInterfaceWrapper) PostCdsFix(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCdsFix(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostCdsOptimize operation middleware
func (siw *ServerInterfaceWrapper) PostCdsOptimize(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCdsOptimize(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostCdsTranslate operation middleware
func (siw *ServerInterfaceWrapper) PostCdsTranslate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCdsTranslate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostCloningFragment operation middleware
func (siw *ServerInterfaceWrapper) PostCloningFragment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCloningFragment(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostCloningGoldenGate operation middleware
func (siw *ServerInterfaceWrapper) PostCloningGoldenGate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCloningGoldenGate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostCloningLigate operation middleware
func (siw *ServerInterfaceWrapper) PostCloningLigate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCloningLigate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostCloningRestrictionDigest operation middleware
func (siw *ServerInterfaceWrapper) PostCloningRestrictionDigest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCloningRestrictionDigest(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostCodonTablesAddTables operation middleware
func (siw *ServerInterfaceWrapper) PostCodonTablesAddTables(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCodonTablesAddTables(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostCodonTablesCompromiseTables operation middleware
func (siw *ServerInterfaceWrapper) PostCodonTablesCompromiseTables(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCodonTablesCompromiseTables(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCodonTablesDefaultOrganisms operation middleware
func (siw *ServerInterfaceWrapper) GetCodonTablesDefaultOrganisms(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCodonTablesDefaultOrganisms(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostCodonTablesFromGenbank operation middleware
func (siw *ServerInterfaceWrapper) PostCodonTablesFromGenbank(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCodonTablesFromGenbank(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostCodonTablesGetOrganismTable operation middleware
func (siw *ServerInterfaceWrapper) PostCodonTablesGetOrganismTable(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCodonTablesGetOrganismTable(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostCodonTablesNew operation middleware
func (siw *ServerInterfaceWrapper) PostCodonTablesNew(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCodonTablesNew(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostExecuteLua operation middleware
func (siw *ServerInterfaceWrapper) PostExecuteLua(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostExecuteLua(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostFoldingLinearfoldContraFoldV2 operation middleware
func (siw *ServerInterfaceWrapper) PostFoldingLinearfoldContraFoldV2(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostFoldingLinearfoldContraFoldV2(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostFoldingLinearfoldViennaRnaFold operation middleware
func (siw *ServerInterfaceWrapper) PostFoldingLinearfoldViennaRnaFold(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostFoldingLinearfoldViennaRnaFold(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostFoldingZuker operation middleware
func (siw *ServerInterfaceWrapper) PostFoldingZuker(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostFoldingZuker(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostIoFastaParse operation middleware
func (siw *ServerInterfaceWrapper) PostIoFastaParse(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostIoFastaParse(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostIoFastaWrite operation middleware
func (siw *ServerInterfaceWrapper) PostIoFastaWrite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostIoFastaWrite(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostIoFastqParse operation middleware
func (siw *ServerInterfaceWrapper) PostIoFastqParse(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostIoFastqParse(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostIoFastqWrite operation middleware
func (siw *ServerInterfaceWrapper) PostIoFastqWrite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostIoFastqWrite(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostIoGenbankParse operation middleware
func (siw *ServerInterfaceWrapper) PostIoGenbankParse(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostIoGenbankParse(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostIoGenbankWrite operation middleware
func (siw *ServerInterfaceWrapper) PostIoGenbankWrite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostIoGenbankWrite(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostIoPileupParse operation middleware
func (siw *ServerInterfaceWrapper) PostIoPileupParse(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostIoPileupParse(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostIoPileupWrite operation middleware
func (siw *ServerInterfaceWrapper) PostIoPileupWrite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostIoPileupWrite(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostIoSlow5Parse operation middleware
func (siw *ServerInterfaceWrapper) PostIoSlow5Parse(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostIoSlow5Parse(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostIoSlow5SvbCompress operation middleware
func (siw *ServerInterfaceWrapper) PostIoSlow5SvbCompress(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostIoSlow5SvbCompress(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostIoSlow5SvbDecompress operation middleware
func (siw *ServerInterfaceWrapper) PostIoSlow5SvbDecompress(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostIoSlow5SvbDecompress(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostIoSlow5Write operation middleware
func (siw *ServerInterfaceWrapper) PostIoSlow5Write(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostIoSlow5Write(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostPcrComplexPcr operation middleware
func (siw *ServerInterfaceWrapper) PostPcrComplexPcr(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPcrComplexPcr(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostPcrPrimersDebruijnBarcodes operation middleware
func (siw *ServerInterfaceWrapper) PostPcrPrimersDebruijnBarcodes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPcrPrimersDebruijnBarcodes(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostPcrPrimersDesignPrimers operation middleware
func (siw *ServerInterfaceWrapper) PostPcrPrimersDesignPrimers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPcrPrimersDesignPrimers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostPcrPrimersMarmurDoty operation middleware
func (siw *ServerInterfaceWrapper) PostPcrPrimersMarmurDoty(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPcrPrimersMarmurDoty(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostPcrPrimersMeltingTemperature operation middleware
func (siw *ServerInterfaceWrapper) PostPcrPrimersMeltingTemperature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPcrPrimersMeltingTemperature(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostPcrPrimersSantaLucia operation middleware
func (siw *ServerInterfaceWrapper) PostPcrPrimersSantaLucia(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPcrPrimersSantaLucia(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostPcrSimplePcr operation middleware
func (siw *ServerInterfaceWrapper) PostPcrSimplePcr(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPcrSimplePcr(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostRandomRandomDna operation middleware
func (siw *ServerInterfaceWrapper) PostRandomRandomDna(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRandomRandomDna(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostRandomRandomProtein operation middleware
func (siw *ServerInterfaceWrapper) PostRandomRandomProtein(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRandomRandomProtein(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostRandomRandomRna operation middleware
func (siw *ServerInterfaceWrapper) PostRandomRandomRna(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRandomRandomRna(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostSeqhash operation middleware
func (siw *ServerInterfaceWrapper) PostSeqhash(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSeqhash(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostSeqhashFragment operation middleware
func (siw *ServerInterfaceWrapper) PostSeqhashFragment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSeqhashFragment(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostUtilsIsPalindromic operation middleware
func (siw *ServerInterfaceWrapper) PostUtilsIsPalindromic(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUtilsIsPalindromic(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostUtilsReverseComplement operation middleware
func (siw *ServerInterfaceWrapper) PostUtilsReverseComplement(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUtilsReverseComplement(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/align/mash", wrapper.PostAlignMash)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/align/mash_many", wrapper.PostAlignMashMany)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/align/needleman_wunsch", wrapper.PostAlignNeedlemanWunsch)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/align/smith_waterman", wrapper.PostAlignSmithWaterman)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/cds/fix", wrapper.PostCdsFix)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/cds/optimize", wrapper.PostCdsOptimize)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/cds/translate", wrapper.PostCdsTranslate)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/cloning/fragment", wrapper.PostCloningFragment)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/cloning/golden_gate", wrapper.PostCloningGoldenGate)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/cloning/ligate", wrapper.PostCloningLigate)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/cloning/restriction_digest", wrapper.PostCloningRestrictionDigest)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/codon_tables/add_tables", wrapper.PostCodonTablesAddTables)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/codon_tables/compromise_tables", wrapper.PostCodonTablesCompromiseTables)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/codon_tables/default_organisms", wrapper.GetCodonTablesDefaultOrganisms)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/codon_tables/from_genbank", wrapper.PostCodonTablesFromGenbank)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/codon_tables/get_organism_table", wrapper.PostCodonTablesGetOrganismTable)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/codon_tables/new", wrapper.PostCodonTablesNew)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/execute_lua", wrapper.PostExecuteLua)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/folding/linearfold/contra_fold_v2", wrapper.PostFoldingLinearfoldContraFoldV2)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/folding/linearfold/vienna_rna_fold", wrapper.PostFoldingLinearfoldViennaRnaFold)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/folding/zuker", wrapper.PostFoldingZuker)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/io/fasta/parse", wrapper.PostIoFastaParse)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/io/fasta/write", wrapper.PostIoFastaWrite)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/io/fastq/parse", wrapper.PostIoFastqParse)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/io/fastq/write", wrapper.PostIoFastqWrite)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/io/genbank/parse", wrapper.PostIoGenbankParse)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/io/genbank/write", wrapper.PostIoGenbankWrite)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/io/pileup/parse", wrapper.PostIoPileupParse)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/io/pileup/write", wrapper.PostIoPileupWrite)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/io/slow5/parse", wrapper.PostIoSlow5Parse)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/io/slow5/svb_compress", wrapper.PostIoSlow5SvbCompress)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/io/slow5/svb_decompress", wrapper.PostIoSlow5SvbDecompress)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/io/slow5/write", wrapper.PostIoSlow5Write)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/pcr/complex_pcr", wrapper.PostPcrComplexPcr)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/pcr/primers/debruijn_barcodes", wrapper.PostPcrPrimersDebruijnBarcodes)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/pcr/primers/design_primers", wrapper.PostPcrPrimersDesignPrimers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/pcr/primers/marmur_doty", wrapper.PostPcrPrimersMarmurDoty)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/pcr/primers/melting_temperature", wrapper.PostPcrPrimersMeltingTemperature)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/pcr/primers/santa_lucia", wrapper.PostPcrPrimersSantaLucia)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/pcr/simple_pcr", wrapper.PostPcrSimplePcr)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/random/random_dna", wrapper.PostRandomRandomDna)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/random/random_protein", wrapper.PostRandomRandomProtein)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/random/random_rna", wrapper.PostRandomRandomRna)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/seqhash", wrapper.PostSeqhash)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/seqhash_fragment", wrapper.PostSeqhashFragment)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/utils/is_palindromic", wrapper.PostUtilsIsPalindromic)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/utils/reverse_complement", wrapper.PostUtilsReverseComplement)
	})

	return r
}

type PostAlignMashRequestObject struct {
	Body *PostAlignMashJSONRequestBody
}

type PostAlignMashResponseObject interface {
	VisitPostAlignMashResponse(w http.ResponseWriter) error
}

type PostAlignMash200JSONResponse struct {
	Distance *float32 `json:"distance,omitempty"`
}

func (response PostAlignMash200JSONResponse) VisitPostAlignMashResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAlignMashManyRequestObject struct {
	Body *PostAlignMashManyJSONRequestBody
}

type PostAlignMashManyResponseObject interface {
	VisitPostAlignMashManyResponse(w http.ResponseWriter) error
}

type PostAlignMashMany200JSONResponse []float32

func (response PostAlignMashMany200JSONResponse) VisitPostAlignMashManyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAlignNeedlemanWunschRequestObject struct {
	Body *PostAlignNeedlemanWunschJSONRequestBody
}

type PostAlignNeedlemanWunschResponseObject interface {
	VisitPostAlignNeedlemanWunschResponse(w http.ResponseWriter) error
}

type PostAlignNeedlemanWunsch200JSONResponse struct {
	AlignmentA *string  `json:"alignment_a,omitempty"`
	AlignmentB *string  `json:"alignment_b,omitempty"`
	Score      *float32 `json:"score,omitempty"`
}

func (response PostAlignNeedlemanWunsch200JSONResponse) VisitPostAlignNeedlemanWunschResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAlignSmithWatermanRequestObject struct {
	Body *PostAlignSmithWatermanJSONRequestBody
}

type PostAlignSmithWatermanResponseObject interface {
	VisitPostAlignSmithWatermanResponse(w http.ResponseWriter) error
}

type PostAlignSmithWaterman200JSONResponse struct {
	AlignmentA *string  `json:"alignment_a,omitempty"`
	AlignmentB *string  `json:"alignment_b,omitempty"`
	Score      *float32 `json:"score,omitempty"`
}

func (response PostAlignSmithWaterman200JSONResponse) VisitPostAlignSmithWatermanResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostCdsFixRequestObject struct {
	Body *PostCdsFixJSONRequestBody
}

type PostCdsFixResponseObject interface {
	VisitPostCdsFixResponse(w http.ResponseWriter) error
}

type PostCdsFix200JSONResponse struct {
	Changes  []Change `json:"changes"`
	Sequence string   `json:"sequence"`
}

func (response PostCdsFix200JSONResponse) VisitPostCdsFixResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostCdsFix400TextResponse string

func (response PostCdsFix400TextResponse) VisitPostCdsFixResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

type PostCdsFix500TextResponse string

func (response PostCdsFix500TextResponse) VisitPostCdsFixResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type PostCdsOptimizeRequestObject struct {
	Body *PostCdsOptimizeJSONRequestBody
}

type PostCdsOptimizeResponseObject interface {
	VisitPostCdsOptimizeResponse(w http.ResponseWriter) error
}

type PostCdsOptimize200JSONResponse string

func (response PostCdsOptimize200JSONResponse) VisitPostCdsOptimizeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostCdsOptimize400TextResponse string

func (response PostCdsOptimize400TextResponse) VisitPostCdsOptimizeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

type PostCdsOptimize500TextResponse string

func (response PostCdsOptimize500TextResponse) VisitPostCdsOptimizeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type PostCdsTranslateRequestObject struct {
	Body *PostCdsTranslateJSONRequestBody
}

type PostCdsTranslateResponseObject interface {
	VisitPostCdsTranslateResponse(w http.ResponseWriter) error
}

type PostCdsTranslate200JSONResponse string

func (response PostCdsTranslate200JSONResponse) VisitPostCdsTranslateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostCdsTranslate500TextResponse string

func (response PostCdsTranslate500TextResponse) VisitPostCdsTranslateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type PostCloningFragmentRequestObject struct {
	Body *PostCloningFragmentJSONRequestBody
}

type PostCloningFragmentResponseObject interface {
	VisitPostCloningFragmentResponse(w http.ResponseWriter) error
}

type PostCloningFragment200JSONResponse struct {
	Efficiency float32  `json:"efficiency"`
	Fragments  []string `json:"fragments"`
}

func (response PostCloningFragment200JSONResponse) VisitPostCloningFragmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostCloningFragment500TextResponse string

func (response PostCloningFragment500TextResponse) VisitPostCloningFragmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type PostCloningGoldenGateRequestObject struct {
	Body *PostCloningGoldenGateJSONRequestBody
}

type PostCloningGoldenGateResponseObject interface {
	VisitPostCloningGoldenGateResponse(w http.ResponseWriter) error
}

type PostCloningGoldenGate200Response struct {
}

func (response PostCloningGoldenGate200Response) VisitPostCloningGoldenGateResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostCloningGoldenGate500TextResponse string

func (response PostCloningGoldenGate500TextResponse) VisitPostCloningGoldenGateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type PostCloningLigateRequestObject struct {
	Body *PostCloningLigateJSONRequestBody
}

type PostCloningLigateResponseObject interface {
	VisitPostCloningLigateResponse(w http.ResponseWriter) error
}

type PostCloningLigate200Response struct {
}

func (response PostCloningLigate200Response) VisitPostCloningLigateResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostCloningRestrictionDigestRequestObject struct {
	Body *PostCloningRestrictionDigestJSONRequestBody
}

type PostCloningRestrictionDigestResponseObject interface {
	VisitPostCloningRestrictionDigestResponse(w http.ResponseWriter) error
}

type PostCloningRestrictionDigest200Response struct {
}

func (response PostCloningRestrictionDigest200Response) VisitPostCloningRestrictionDigestResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostCloningRestrictionDigest500TextResponse string

func (response PostCloningRestrictionDigest500TextResponse) VisitPostCloningRestrictionDigestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type PostCodonTablesAddTablesRequestObject struct {
	Body *PostCodonTablesAddTablesJSONRequestBody
}

type PostCodonTablesAddTablesResponseObject interface {
	VisitPostCodonTablesAddTablesResponse(w http.ResponseWriter) error
}

type PostCodonTablesAddTables200JSONResponse CodonTable

func (response PostCodonTablesAddTables200JSONResponse) VisitPostCodonTablesAddTablesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostCodonTablesCompromiseTablesRequestObject struct {
	Body *PostCodonTablesCompromiseTablesJSONRequestBody
}

type PostCodonTablesCompromiseTablesResponseObject interface {
	VisitPostCodonTablesCompromiseTablesResponse(w http.ResponseWriter) error
}

type PostCodonTablesCompromiseTables200JSONResponse CodonTable

func (response PostCodonTablesCompromiseTables200JSONResponse) VisitPostCodonTablesCompromiseTablesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCodonTablesDefaultOrganismsRequestObject struct {
}

type GetCodonTablesDefaultOrganismsResponseObject interface {
	VisitGetCodonTablesDefaultOrganismsResponse(w http.ResponseWriter) error
}

type GetCodonTablesDefaultOrganisms200JSONResponse []string

func (response GetCodonTablesDefaultOrganisms200JSONResponse) VisitGetCodonTablesDefaultOrganismsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostCodonTablesFromGenbankRequestObject struct {
	Body *PostCodonTablesFromGenbankJSONRequestBody
}

type PostCodonTablesFromGenbankResponseObject interface {
	VisitPostCodonTablesFromGenbankResponse(w http.ResponseWriter) error
}

type PostCodonTablesFromGenbank200JSONResponse CodonTable

func (response PostCodonTablesFromGenbank200JSONResponse) VisitPostCodonTablesFromGenbankResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostCodonTablesGetOrganismTableRequestObject struct {
	Body *PostCodonTablesGetOrganismTableJSONRequestBody
}

type PostCodonTablesGetOrganismTableResponseObject interface {
	VisitPostCodonTablesGetOrganismTableResponse(w http.ResponseWriter) error
}

type PostCodonTablesGetOrganismTable200JSONResponse CodonTable

func (response PostCodonTablesGetOrganismTable200JSONResponse) VisitPostCodonTablesGetOrganismTableResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostCodonTablesNewRequestObject struct {
	Body *PostCodonTablesNewJSONRequestBody
}

type PostCodonTablesNewResponseObject interface {
	VisitPostCodonTablesNewResponse(w http.ResponseWriter) error
}

type PostCodonTablesNew200JSONResponse CodonTable

func (response PostCodonTablesNew200JSONResponse) VisitPostCodonTablesNewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostExecuteLuaRequestObject struct {
	Body *PostExecuteLuaJSONRequestBody
}

type PostExecuteLuaResponseObject interface {
	VisitPostExecuteLuaResponse(w http.ResponseWriter) error
}

type PostExecuteLua200JSONResponse struct {
	Log    string `json:"log"`
	Output string `json:"output"`
}

func (response PostExecuteLua200JSONResponse) VisitPostExecuteLuaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostExecuteLua500TextResponse string

func (response PostExecuteLua500TextResponse) VisitPostExecuteLuaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type PostFoldingLinearfoldContraFoldV2RequestObject struct {
	Body *PostFoldingLinearfoldContraFoldV2JSONRequestBody
}

type PostFoldingLinearfoldContraFoldV2ResponseObject interface {
	VisitPostFoldingLinearfoldContraFoldV2Response(w http.ResponseWriter) error
}

type PostFoldingLinearfoldContraFoldV2200JSONResponse struct {
	DotBracket *string  `json:"dot_bracket,omitempty"`
	Score      *float32 `json:"score,omitempty"`
}

func (response PostFoldingLinearfoldContraFoldV2200JSONResponse) VisitPostFoldingLinearfoldContraFoldV2Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostFoldingLinearfoldViennaRnaFoldRequestObject struct {
	Body *PostFoldingLinearfoldViennaRnaFoldJSONRequestBody
}

type PostFoldingLinearfoldViennaRnaFoldResponseObject interface {
	VisitPostFoldingLinearfoldViennaRnaFoldResponse(w http.ResponseWriter) error
}

type PostFoldingLinearfoldViennaRnaFold200JSONResponse struct {
	DotBracket *string  `json:"dot_bracket,omitempty"`
	Score      *float32 `json:"score,omitempty"`
}

func (response PostFoldingLinearfoldViennaRnaFold200JSONResponse) VisitPostFoldingLinearfoldViennaRnaFoldResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostFoldingZukerRequestObject struct {
	Body *PostFoldingZukerJSONRequestBody
}

type PostFoldingZukerResponseObject interface {
	VisitPostFoldingZukerResponse(w http.ResponseWriter) error
}

type PostFoldingZuker200JSONResponse struct {
	DotBracket *string  `json:"dot_bracket,omitempty"`
	Score      *float32 `json:"score,omitempty"`
}

func (response PostFoldingZuker200JSONResponse) VisitPostFoldingZukerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostIoFastaParseRequestObject struct {
	Body *PostIoFastaParseTextRequestBody
}

type PostIoFastaParseResponseObject interface {
	VisitPostIoFastaParseResponse(w http.ResponseWriter) error
}

type PostIoFastaParse200JSONResponse []FastaRecord

func (response PostIoFastaParse200JSONResponse) VisitPostIoFastaParseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostIoFastaParse500TextResponse string

func (response PostIoFastaParse500TextResponse) VisitPostIoFastaParseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type PostIoFastaWriteRequestObject struct {
	Body *PostIoFastaWriteJSONRequestBody
}

type PostIoFastaWriteResponseObject interface {
	VisitPostIoFastaWriteResponse(w http.ResponseWriter) error
}

type PostIoFastaWrite200Response struct {
}

func (response PostIoFastaWrite200Response) VisitPostIoFastaWriteResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostIoFastqParseRequestObject struct {
	Body *PostIoFastqParseTextRequestBody
}

type PostIoFastqParseResponseObject interface {
	VisitPostIoFastqParseResponse(w http.ResponseWriter) error
}

type PostIoFastqParse200JSONResponse []FastqRead

func (response PostIoFastqParse200JSONResponse) VisitPostIoFastqParseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostIoFastqWriteRequestObject struct {
	Body *PostIoFastqWriteJSONRequestBody
}

type PostIoFastqWriteResponseObject interface {
	VisitPostIoFastqWriteResponse(w http.ResponseWriter) error
}

type PostIoFastqWrite200Response struct {
}

func (response PostIoFastqWrite200Response) VisitPostIoFastqWriteResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostIoGenbankParseRequestObject struct {
	Body *PostIoGenbankParseTextRequestBody
}

type PostIoGenbankParseResponseObject interface {
	VisitPostIoGenbankParseResponse(w http.ResponseWriter) error
}

type PostIoGenbankParse200JSONResponse []GenbankRecord

func (response PostIoGenbankParse200JSONResponse) VisitPostIoGenbankParseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostIoGenbankParse500TextResponse string

func (response PostIoGenbankParse500TextResponse) VisitPostIoGenbankParseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type PostIoGenbankWriteRequestObject struct {
	Body *PostIoGenbankWriteJSONRequestBody
}

type PostIoGenbankWriteResponseObject interface {
	VisitPostIoGenbankWriteResponse(w http.ResponseWriter) error
}

type PostIoGenbankWrite200Response struct {
}

func (response PostIoGenbankWrite200Response) VisitPostIoGenbankWriteResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostIoPileupParseRequestObject struct {
	Body *PostIoPileupParseJSONRequestBody
}

type PostIoPileupParseResponseObject interface {
	VisitPostIoPileupParseResponse(w http.ResponseWriter) error
}

type PostIoPileupParse200JSONResponse []PileupLine

func (response PostIoPileupParse200JSONResponse) VisitPostIoPileupParseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostIoPileupWriteRequestObject struct {
	Body *PostIoPileupWriteJSONRequestBody
}

type PostIoPileupWriteResponseObject interface {
	VisitPostIoPileupWriteResponse(w http.ResponseWriter) error
}

type PostIoPileupWrite200JSONResponse struct {
	Data *string `json:"data,omitempty"`
}

func (response PostIoPileupWrite200JSONResponse) VisitPostIoPileupWriteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostIoSlow5ParseRequestObject struct {
	Body *PostIoSlow5ParseJSONRequestBody
}

type PostIoSlow5ParseResponseObject interface {
	VisitPostIoSlow5ParseResponse(w http.ResponseWriter) error
}

type PostIoSlow5Parse200JSONResponse struct {
	Header *Slow5Header `json:"header,omitempty"`
	Reads  *[]Slow5Read `json:"reads,omitempty"`
}

func (response PostIoSlow5Parse200JSONResponse) VisitPostIoSlow5ParseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostIoSlow5SvbCompressRequestObject struct {
	Body *PostIoSlow5SvbCompressJSONRequestBody
}

type PostIoSlow5SvbCompressResponseObject interface {
	VisitPostIoSlow5SvbCompressResponse(w http.ResponseWriter) error
}

type PostIoSlow5SvbCompress200JSONResponse struct {
	Data *string `json:"data,omitempty"`
	Mask *string `json:"mask,omitempty"`
}

func (response PostIoSlow5SvbCompress200JSONResponse) VisitPostIoSlow5SvbCompressResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostIoSlow5SvbDecompressRequestObject struct {
	Body *PostIoSlow5SvbDecompressJSONRequestBody
}

type PostIoSlow5SvbDecompressResponseObject interface {
	VisitPostIoSlow5SvbDecompressResponse(w http.ResponseWriter) error
}

type PostIoSlow5SvbDecompress200JSONResponse struct {
	RawSignal *[]int `json:"rawSignal,omitempty"`
}

func (response PostIoSlow5SvbDecompress200JSONResponse) VisitPostIoSlow5SvbDecompressResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostIoSlow5WriteRequestObject struct {
	Body *PostIoSlow5WriteJSONRequestBody
}

type PostIoSlow5WriteResponseObject interface {
	VisitPostIoSlow5WriteResponse(w http.ResponseWriter) error
}

type PostIoSlow5Write200JSONResponse struct {
	Data *string `json:"data,omitempty"`
}

func (response PostIoSlow5Write200JSONResponse) VisitPostIoSlow5WriteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostPcrComplexPcrRequestObject struct {
	Body *PostPcrComplexPcrJSONRequestBody
}

type PostPcrComplexPcrResponseObject interface {
	VisitPostPcrComplexPcrResponse(w http.ResponseWriter) error
}

type PostPcrComplexPcr200JSONResponse []string

func (response PostPcrComplexPcr200JSONResponse) VisitPostPcrComplexPcrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostPcrComplexPcr500TextResponse string

func (response PostPcrComplexPcr500TextResponse) VisitPostPcrComplexPcrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type PostPcrPrimersDebruijnBarcodesRequestObject struct {
	Body *PostPcrPrimersDebruijnBarcodesJSONRequestBody
}

type PostPcrPrimersDebruijnBarcodesResponseObject interface {
	VisitPostPcrPrimersDebruijnBarcodesResponse(w http.ResponseWriter) error
}

type PostPcrPrimersDebruijnBarcodes200Response struct {
}

func (response PostPcrPrimersDebruijnBarcodes200Response) VisitPostPcrPrimersDebruijnBarcodesResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostPcrPrimersDesignPrimersRequestObject struct {
	Body *PostPcrPrimersDesignPrimersJSONRequestBody
}

type PostPcrPrimersDesignPrimersResponseObject interface {
	VisitPostPcrPrimersDesignPrimersResponse(w http.ResponseWriter) error
}

type PostPcrPrimersDesignPrimers200JSONResponse struct {
	ForwardPrimer *string `json:"forward_primer,omitempty"`
	ReversePrimer *string `json:"reverse_primer,omitempty"`
}

func (response PostPcrPrimersDesignPrimers200JSONResponse) VisitPostPcrPrimersDesignPrimersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostPcrPrimersMarmurDotyRequestObject struct {
	Body *PostPcrPrimersMarmurDotyJSONRequestBody
}

type PostPcrPrimersMarmurDotyResponseObject interface {
	VisitPostPcrPrimersMarmurDotyResponse(w http.ResponseWriter) error
}

type PostPcrPrimersMarmurDoty200Response struct {
}

func (response PostPcrPrimersMarmurDoty200Response) VisitPostPcrPrimersMarmurDotyResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostPcrPrimersMeltingTemperatureRequestObject struct {
	Body *PostPcrPrimersMeltingTemperatureJSONRequestBody
}

type PostPcrPrimersMeltingTemperatureResponseObject interface {
	VisitPostPcrPrimersMeltingTemperatureResponse(w http.ResponseWriter) error
}

type PostPcrPrimersMeltingTemperature200Response struct {
}

func (response PostPcrPrimersMeltingTemperature200Response) VisitPostPcrPrimersMeltingTemperatureResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostPcrPrimersSantaLuciaRequestObject struct {
	Body *PostPcrPrimersSantaLuciaJSONRequestBody
}

type PostPcrPrimersSantaLuciaResponseObject interface {
	VisitPostPcrPrimersSantaLuciaResponse(w http.ResponseWriter) error
}

type PostPcrPrimersSantaLucia200Response struct {
}

func (response PostPcrPrimersSantaLucia200Response) VisitPostPcrPrimersSantaLuciaResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostPcrSimplePcrRequestObject struct {
	Body *PostPcrSimplePcrJSONRequestBody
}

type PostPcrSimplePcrResponseObject interface {
	VisitPostPcrSimplePcrResponse(w http.ResponseWriter) error
}

type PostPcrSimplePcr200JSONResponse string

func (response PostPcrSimplePcr200JSONResponse) VisitPostPcrSimplePcrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostPcrSimplePcr500TextResponse string

func (response PostPcrSimplePcr500TextResponse) VisitPostPcrSimplePcrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type PostRandomRandomDnaRequestObject struct {
	Body *PostRandomRandomDnaJSONRequestBody
}

type PostRandomRandomDnaResponseObject interface {
	VisitPostRandomRandomDnaResponse(w http.ResponseWriter) error
}

type PostRandomRandomDna200JSONResponse struct {
	Sequence *string `json:"sequence,omitempty"`
}

func (response PostRandomRandomDna200JSONResponse) VisitPostRandomRandomDnaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostRandomRandomProteinRequestObject struct {
	Body *PostRandomRandomProteinJSONRequestBody
}

type PostRandomRandomProteinResponseObject interface {
	VisitPostRandomRandomProteinResponse(w http.ResponseWriter) error
}

type PostRandomRandomProtein200JSONResponse struct {
	Sequence *string `json:"sequence,omitempty"`
}

func (response PostRandomRandomProtein200JSONResponse) VisitPostRandomRandomProteinResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostRandomRandomRnaRequestObject struct {
	Body *PostRandomRandomRnaJSONRequestBody
}

type PostRandomRandomRnaResponseObject interface {
	VisitPostRandomRandomRnaResponse(w http.ResponseWriter) error
}

type PostRandomRandomRna200JSONResponse struct {
	Sequence *string `json:"sequence,omitempty"`
}

func (response PostRandomRandomRna200JSONResponse) VisitPostRandomRandomRnaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSeqhashRequestObject struct {
	Body *PostSeqhashJSONRequestBody
}

type PostSeqhashResponseObject interface {
	VisitPostSeqhashResponse(w http.ResponseWriter) error
}

type PostSeqhash200JSONResponse struct {
	Hash *string `json:"hash,omitempty"`
}

func (response PostSeqhash200JSONResponse) VisitPostSeqhashResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSeqhashFragmentRequestObject struct {
	Body *PostSeqhashFragmentJSONRequestBody
}

type PostSeqhashFragmentResponseObject interface {
	VisitPostSeqhashFragmentResponse(w http.ResponseWriter) error
}

type PostSeqhashFragment200JSONResponse struct {
	Hash *string `json:"hash,omitempty"`
}

func (response PostSeqhashFragment200JSONResponse) VisitPostSeqhashFragmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUtilsIsPalindromicRequestObject struct {
	Body *PostUtilsIsPalindromicJSONRequestBody
}

type PostUtilsIsPalindromicResponseObject interface {
	VisitPostUtilsIsPalindromicResponse(w http.ResponseWriter) error
}

type PostUtilsIsPalindromic200JSONResponse struct {
	IsPalindromic *bool `json:"isPalindromic,omitempty"`
}

func (response PostUtilsIsPalindromic200JSONResponse) VisitPostUtilsIsPalindromicResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUtilsReverseComplementRequestObject struct {
	Body *PostUtilsReverseComplementJSONRequestBody
}

type PostUtilsReverseComplementResponseObject interface {
	VisitPostUtilsReverseComplementResponse(w http.ResponseWriter) error
}

type PostUtilsReverseComplement200JSONResponse struct {
	Sequence *string `json:"sequence,omitempty"`
}

func (response PostUtilsReverseComplement200JSONResponse) VisitPostUtilsReverseComplementResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Calculate Mash Distance
	// (POST /align/mash)
	PostAlignMash(ctx context.Context, request PostAlignMashRequestObject) (PostAlignMashResponseObject, error)
	// Calculate Mash Distance Against Many Sequences
	// (POST /align/mash_many)
	PostAlignMashMany(ctx context.Context, request PostAlignMashManyRequestObject) (PostAlignMashManyResponseObject, error)
	// Perform Needleman-Wunsch Alignment
	// (POST /align/needleman_wunsch)
	PostAlignNeedlemanWunsch(ctx context.Context, request PostAlignNeedlemanWunschRequestObject) (PostAlignNeedlemanWunschResponseObject, error)
	// Perform Smith-Waterman Alignment
	// (POST /align/smith_waterman)
	PostAlignSmithWaterman(ctx context.Context, request PostAlignSmithWatermanRequestObject) (PostAlignSmithWatermanResponseObject, error)
	// Fix CDS
	// (POST /cds/fix)
	PostCdsFix(ctx context.Context, request PostCdsFixRequestObject) (PostCdsFixResponseObject, error)
	// Optimize CDS.
	// (POST /cds/optimize)
	PostCdsOptimize(ctx context.Context, request PostCdsOptimizeRequestObject) (PostCdsOptimizeResponseObject, error)
	// Translate CDS
	// (POST /cds/translate)
	PostCdsTranslate(ctx context.Context, request PostCdsTranslateRequestObject) (PostCdsTranslateResponseObject, error)
	// Fragment DNA for GoldenGate
	// (POST /cloning/fragment)
	PostCloningFragment(ctx context.Context, request PostCloningFragmentRequestObject) (PostCloningFragmentResponseObject, error)
	// Simulate GoldenGate assembly
	// (POST /cloning/golden_gate)
	PostCloningGoldenGate(ctx context.Context, request PostCloningGoldenGateRequestObject) (PostCloningGoldenGateResponseObject, error)
	// Simulate ligation
	// (POST /cloning/ligate)
	PostCloningLigate(ctx context.Context, request PostCloningLigateRequestObject) (PostCloningLigateResponseObject, error)
	// Simulate restriction digest
	// (POST /cloning/restriction_digest)
	PostCloningRestrictionDigest(ctx context.Context, request PostCloningRestrictionDigestRequestObject) (PostCloningRestrictionDigestResponseObject, error)
	// Add Two Codon Tables
	// (POST /codon_tables/add_tables)
	PostCodonTablesAddTables(ctx context.Context, request PostCodonTablesAddTablesRequestObject) (PostCodonTablesAddTablesResponseObject, error)
	// Create Compromise Codon Table
	// (POST /codon_tables/compromise_tables)
	PostCodonTablesCompromiseTables(ctx context.Context, request PostCodonTablesCompromiseTablesRequestObject) (PostCodonTablesCompromiseTablesResponseObject, error)
	// Get Default Organism Names
	// (GET /codon_tables/default_organisms)
	GetCodonTablesDefaultOrganisms(ctx context.Context, request GetCodonTablesDefaultOrganismsRequestObject) (GetCodonTablesDefaultOrganismsResponseObject, error)
	// Create Weighted Codon Table from Genbank Record
	// (POST /codon_tables/from_genbank)
	PostCodonTablesFromGenbank(ctx context.Context, request PostCodonTablesFromGenbankRequestObject) (PostCodonTablesFromGenbankResponseObject, error)
	// Get Codon Table for an Organism
	// (POST /codon_tables/get_organism_table)
	PostCodonTablesGetOrganismTable(ctx context.Context, request PostCodonTablesGetOrganismTableRequestObject) (PostCodonTablesGetOrganismTableResponseObject, error)
	// Create New Codon Table
	// (POST /codon_tables/new)
	PostCodonTablesNew(ctx context.Context, request PostCodonTablesNewRequestObject) (PostCodonTablesNewResponseObject, error)
	// Run a lua script
	// (POST /execute_lua)
	PostExecuteLua(ctx context.Context, request PostExecuteLuaRequestObject) (PostExecuteLuaResponseObject, error)
	// Contra Fold V2
	// (POST /folding/linearfold/contra_fold_v2)
	PostFoldingLinearfoldContraFoldV2(ctx context.Context, request PostFoldingLinearfoldContraFoldV2RequestObject) (PostFoldingLinearfoldContraFoldV2ResponseObject, error)
	// Vienna RNA Fold
	// (POST /folding/linearfold/vienna_rna_fold)
	PostFoldingLinearfoldViennaRnaFold(ctx context.Context, request PostFoldingLinearfoldViennaRnaFoldRequestObject) (PostFoldingLinearfoldViennaRnaFoldResponseObject, error)
	// Zuker Folding
	// (POST /folding/zuker)
	PostFoldingZuker(ctx context.Context, request PostFoldingZukerRequestObject) (PostFoldingZukerResponseObject, error)
	// Parse FASTA data
	// (POST /io/fasta/parse)
	PostIoFastaParse(ctx context.Context, request PostIoFastaParseRequestObject) (PostIoFastaParseResponseObject, error)
	// Write FASTA data
	// (POST /io/fasta/write)
	PostIoFastaWrite(ctx context.Context, request PostIoFastaWriteRequestObject) (PostIoFastaWriteResponseObject, error)
	// Parse FASTQ data
	// (POST /io/fastq/parse)
	PostIoFastqParse(ctx context.Context, request PostIoFastqParseRequestObject) (PostIoFastqParseResponseObject, error)
	// Write FASTQ data
	// (POST /io/fastq/write)
	PostIoFastqWrite(ctx context.Context, request PostIoFastqWriteRequestObject) (PostIoFastqWriteResponseObject, error)
	// Parse Genbank data
	// (POST /io/genbank/parse)
	PostIoGenbankParse(ctx context.Context, request PostIoGenbankParseRequestObject) (PostIoGenbankParseResponseObject, error)
	// Write Genbank data
	// (POST /io/genbank/write)
	PostIoGenbankWrite(ctx context.Context, request PostIoGenbankWriteRequestObject) (PostIoGenbankWriteResponseObject, error)
	// Parse Pileup Data
	// (POST /io/pileup/parse)
	PostIoPileupParse(ctx context.Context, request PostIoPileupParseRequestObject) (PostIoPileupParseResponseObject, error)
	// Write Pileup Data
	// (POST /io/pileup/write)
	PostIoPileupWrite(ctx context.Context, request PostIoPileupWriteRequestObject) (PostIoPileupWriteResponseObject, error)
	// Parse slow5 Data
	// (POST /io/slow5/parse)
	PostIoSlow5Parse(ctx context.Context, request PostIoSlow5ParseRequestObject) (PostIoSlow5ParseResponseObject, error)
	// Compress Raw Signal with SVB
	// (POST /io/slow5/svb_compress)
	PostIoSlow5SvbCompress(ctx context.Context, request PostIoSlow5SvbCompressRequestObject) (PostIoSlow5SvbCompressResponseObject, error)
	// Decompress Raw Signal with SVB
	// (POST /io/slow5/svb_decompress)
	PostIoSlow5SvbDecompress(ctx context.Context, request PostIoSlow5SvbDecompressRequestObject) (PostIoSlow5SvbDecompressResponseObject, error)
	// Write slow5 Data
	// (POST /io/slow5/write)
	PostIoSlow5Write(ctx context.Context, request PostIoSlow5WriteRequestObject) (PostIoSlow5WriteResponseObject, error)
	// Simulate PCR
	// (POST /pcr/complex_pcr)
	PostPcrComplexPcr(ctx context.Context, request PostPcrComplexPcrRequestObject) (PostPcrComplexPcrResponseObject, error)
	// Generate De Bruijn sequence-based barcodes
	// (POST /pcr/primers/debruijn_barcodes)
	PostPcrPrimersDebruijnBarcodes(ctx context.Context, request PostPcrPrimersDebruijnBarcodesRequestObject) (PostPcrPrimersDebruijnBarcodesResponseObject, error)
	// Design PCR Primers
	// (POST /pcr/primers/design_primers)
	PostPcrPrimersDesignPrimers(ctx context.Context, request PostPcrPrimersDesignPrimersRequestObject) (PostPcrPrimersDesignPrimersResponseObject, error)
	// Calculate Melting Temperature using Marmur Doty method
	// (POST /pcr/primers/marmur_doty)
	PostPcrPrimersMarmurDoty(ctx context.Context, request PostPcrPrimersMarmurDotyRequestObject) (PostPcrPrimersMarmurDotyResponseObject, error)
	// Calculate Melting Temperature
	// (POST /pcr/primers/melting_temperature)
	PostPcrPrimersMeltingTemperature(ctx context.Context, request PostPcrPrimersMeltingTemperatureRequestObject) (PostPcrPrimersMeltingTemperatureResponseObject, error)
	// Calculate Melting Temperature using Santa Lucia method
	// (POST /pcr/primers/santa_lucia)
	PostPcrPrimersSantaLucia(ctx context.Context, request PostPcrPrimersSantaLuciaRequestObject) (PostPcrPrimersSantaLuciaResponseObject, error)
	// Simulate a simple PCR
	// (POST /pcr/simple_pcr)
	PostPcrSimplePcr(ctx context.Context, request PostPcrSimplePcrRequestObject) (PostPcrSimplePcrResponseObject, error)
	// Generate Random DNA Sequence
	// (POST /random/random_dna)
	PostRandomRandomDna(ctx context.Context, request PostRandomRandomDnaRequestObject) (PostRandomRandomDnaResponseObject, error)
	// Generate Random Protein Sequence
	// (POST /random/random_protein)
	PostRandomRandomProtein(ctx context.Context, request PostRandomRandomProteinRequestObject) (PostRandomRandomProteinResponseObject, error)
	// Generate Random RNA Sequence
	// (POST /random/random_rna)
	PostRandomRandomRna(ctx context.Context, request PostRandomRandomRnaRequestObject) (PostRandomRandomRnaResponseObject, error)
	// Sequence Hashing
	// (POST /seqhash)
	PostSeqhash(ctx context.Context, request PostSeqhashRequestObject) (PostSeqhashResponseObject, error)
	// Sequence Hashing for Fragment
	// (POST /seqhash_fragment)
	PostSeqhashFragment(ctx context.Context, request PostSeqhashFragmentRequestObject) (PostSeqhashFragmentResponseObject, error)
	// Check if Sequence is Palindromic
	// (POST /utils/is_palindromic)
	PostUtilsIsPalindromic(ctx context.Context, request PostUtilsIsPalindromicRequestObject) (PostUtilsIsPalindromicResponseObject, error)
	// Reverse Complement of DNA Sequence
	// (POST /utils/reverse_complement)
	PostUtilsReverseComplement(ctx context.Context, request PostUtilsReverseComplementRequestObject) (PostUtilsReverseComplementResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHttpHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// PostAlignMash operation middleware
func (sh *strictHandler) PostAlignMash(w http.ResponseWriter, r *http.Request) {
	var request PostAlignMashRequestObject

	var body PostAlignMashJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostAlignMash(ctx, request.(PostAlignMashRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAlignMash")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostAlignMashResponseObject); ok {
		if err := validResponse.VisitPostAlignMashResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAlignMashMany operation middleware
func (sh *strictHandler) PostAlignMashMany(w http.ResponseWriter, r *http.Request) {
	var request PostAlignMashManyRequestObject

	var body PostAlignMashManyJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostAlignMashMany(ctx, request.(PostAlignMashManyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAlignMashMany")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostAlignMashManyResponseObject); ok {
		if err := validResponse.VisitPostAlignMashManyResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAlignNeedlemanWunsch operation middleware
func (sh *strictHandler) PostAlignNeedlemanWunsch(w http.ResponseWriter, r *http.Request) {
	var request PostAlignNeedlemanWunschRequestObject

	var body PostAlignNeedlemanWunschJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostAlignNeedlemanWunsch(ctx, request.(PostAlignNeedlemanWunschRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAlignNeedlemanWunsch")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostAlignNeedlemanWunschResponseObject); ok {
		if err := validResponse.VisitPostAlignNeedlemanWunschResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAlignSmithWaterman operation middleware
func (sh *strictHandler) PostAlignSmithWaterman(w http.ResponseWriter, r *http.Request) {
	var request PostAlignSmithWatermanRequestObject

	var body PostAlignSmithWatermanJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostAlignSmithWaterman(ctx, request.(PostAlignSmithWatermanRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAlignSmithWaterman")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostAlignSmithWatermanResponseObject); ok {
		if err := validResponse.VisitPostAlignSmithWatermanResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCdsFix operation middleware
func (sh *strictHandler) PostCdsFix(w http.ResponseWriter, r *http.Request) {
	var request PostCdsFixRequestObject

	var body PostCdsFixJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostCdsFix(ctx, request.(PostCdsFixRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCdsFix")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostCdsFixResponseObject); ok {
		if err := validResponse.VisitPostCdsFixResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCdsOptimize operation middleware
func (sh *strictHandler) PostCdsOptimize(w http.ResponseWriter, r *http.Request) {
	var request PostCdsOptimizeRequestObject

	var body PostCdsOptimizeJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostCdsOptimize(ctx, request.(PostCdsOptimizeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCdsOptimize")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostCdsOptimizeResponseObject); ok {
		if err := validResponse.VisitPostCdsOptimizeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCdsTranslate operation middleware
func (sh *strictHandler) PostCdsTranslate(w http.ResponseWriter, r *http.Request) {
	var request PostCdsTranslateRequestObject

	var body PostCdsTranslateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostCdsTranslate(ctx, request.(PostCdsTranslateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCdsTranslate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostCdsTranslateResponseObject); ok {
		if err := validResponse.VisitPostCdsTranslateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCloningFragment operation middleware
func (sh *strictHandler) PostCloningFragment(w http.ResponseWriter, r *http.Request) {
	var request PostCloningFragmentRequestObject

	var body PostCloningFragmentJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostCloningFragment(ctx, request.(PostCloningFragmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCloningFragment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostCloningFragmentResponseObject); ok {
		if err := validResponse.VisitPostCloningFragmentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCloningGoldenGate operation middleware
func (sh *strictHandler) PostCloningGoldenGate(w http.ResponseWriter, r *http.Request) {
	var request PostCloningGoldenGateRequestObject

	var body PostCloningGoldenGateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostCloningGoldenGate(ctx, request.(PostCloningGoldenGateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCloningGoldenGate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostCloningGoldenGateResponseObject); ok {
		if err := validResponse.VisitPostCloningGoldenGateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCloningLigate operation middleware
func (sh *strictHandler) PostCloningLigate(w http.ResponseWriter, r *http.Request) {
	var request PostCloningLigateRequestObject

	var body PostCloningLigateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostCloningLigate(ctx, request.(PostCloningLigateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCloningLigate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostCloningLigateResponseObject); ok {
		if err := validResponse.VisitPostCloningLigateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCloningRestrictionDigest operation middleware
func (sh *strictHandler) PostCloningRestrictionDigest(w http.ResponseWriter, r *http.Request) {
	var request PostCloningRestrictionDigestRequestObject

	var body PostCloningRestrictionDigestJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostCloningRestrictionDigest(ctx, request.(PostCloningRestrictionDigestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCloningRestrictionDigest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostCloningRestrictionDigestResponseObject); ok {
		if err := validResponse.VisitPostCloningRestrictionDigestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCodonTablesAddTables operation middleware
func (sh *strictHandler) PostCodonTablesAddTables(w http.ResponseWriter, r *http.Request) {
	var request PostCodonTablesAddTablesRequestObject

	var body PostCodonTablesAddTablesJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostCodonTablesAddTables(ctx, request.(PostCodonTablesAddTablesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCodonTablesAddTables")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostCodonTablesAddTablesResponseObject); ok {
		if err := validResponse.VisitPostCodonTablesAddTablesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCodonTablesCompromiseTables operation middleware
func (sh *strictHandler) PostCodonTablesCompromiseTables(w http.ResponseWriter, r *http.Request) {
	var request PostCodonTablesCompromiseTablesRequestObject

	var body PostCodonTablesCompromiseTablesJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostCodonTablesCompromiseTables(ctx, request.(PostCodonTablesCompromiseTablesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCodonTablesCompromiseTables")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostCodonTablesCompromiseTablesResponseObject); ok {
		if err := validResponse.VisitPostCodonTablesCompromiseTablesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCodonTablesDefaultOrganisms operation middleware
func (sh *strictHandler) GetCodonTablesDefaultOrganisms(w http.ResponseWriter, r *http.Request) {
	var request GetCodonTablesDefaultOrganismsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCodonTablesDefaultOrganisms(ctx, request.(GetCodonTablesDefaultOrganismsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCodonTablesDefaultOrganisms")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCodonTablesDefaultOrganismsResponseObject); ok {
		if err := validResponse.VisitGetCodonTablesDefaultOrganismsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCodonTablesFromGenbank operation middleware
func (sh *strictHandler) PostCodonTablesFromGenbank(w http.ResponseWriter, r *http.Request) {
	var request PostCodonTablesFromGenbankRequestObject

	var body PostCodonTablesFromGenbankJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostCodonTablesFromGenbank(ctx, request.(PostCodonTablesFromGenbankRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCodonTablesFromGenbank")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostCodonTablesFromGenbankResponseObject); ok {
		if err := validResponse.VisitPostCodonTablesFromGenbankResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCodonTablesGetOrganismTable operation middleware
func (sh *strictHandler) PostCodonTablesGetOrganismTable(w http.ResponseWriter, r *http.Request) {
	var request PostCodonTablesGetOrganismTableRequestObject

	var body PostCodonTablesGetOrganismTableJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostCodonTablesGetOrganismTable(ctx, request.(PostCodonTablesGetOrganismTableRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCodonTablesGetOrganismTable")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostCodonTablesGetOrganismTableResponseObject); ok {
		if err := validResponse.VisitPostCodonTablesGetOrganismTableResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCodonTablesNew operation middleware
func (sh *strictHandler) PostCodonTablesNew(w http.ResponseWriter, r *http.Request) {
	var request PostCodonTablesNewRequestObject

	var body PostCodonTablesNewJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostCodonTablesNew(ctx, request.(PostCodonTablesNewRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCodonTablesNew")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostCodonTablesNewResponseObject); ok {
		if err := validResponse.VisitPostCodonTablesNewResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostExecuteLua operation middleware
func (sh *strictHandler) PostExecuteLua(w http.ResponseWriter, r *http.Request) {
	var request PostExecuteLuaRequestObject

	var body PostExecuteLuaJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostExecuteLua(ctx, request.(PostExecuteLuaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostExecuteLua")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostExecuteLuaResponseObject); ok {
		if err := validResponse.VisitPostExecuteLuaResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostFoldingLinearfoldContraFoldV2 operation middleware
func (sh *strictHandler) PostFoldingLinearfoldContraFoldV2(w http.ResponseWriter, r *http.Request) {
	var request PostFoldingLinearfoldContraFoldV2RequestObject

	var body PostFoldingLinearfoldContraFoldV2JSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostFoldingLinearfoldContraFoldV2(ctx, request.(PostFoldingLinearfoldContraFoldV2RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostFoldingLinearfoldContraFoldV2")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostFoldingLinearfoldContraFoldV2ResponseObject); ok {
		if err := validResponse.VisitPostFoldingLinearfoldContraFoldV2Response(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostFoldingLinearfoldViennaRnaFold operation middleware
func (sh *strictHandler) PostFoldingLinearfoldViennaRnaFold(w http.ResponseWriter, r *http.Request) {
	var request PostFoldingLinearfoldViennaRnaFoldRequestObject

	var body PostFoldingLinearfoldViennaRnaFoldJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostFoldingLinearfoldViennaRnaFold(ctx, request.(PostFoldingLinearfoldViennaRnaFoldRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostFoldingLinearfoldViennaRnaFold")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostFoldingLinearfoldViennaRnaFoldResponseObject); ok {
		if err := validResponse.VisitPostFoldingLinearfoldViennaRnaFoldResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostFoldingZuker operation middleware
func (sh *strictHandler) PostFoldingZuker(w http.ResponseWriter, r *http.Request) {
	var request PostFoldingZukerRequestObject

	var body PostFoldingZukerJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostFoldingZuker(ctx, request.(PostFoldingZukerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostFoldingZuker")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostFoldingZukerResponseObject); ok {
		if err := validResponse.VisitPostFoldingZukerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostIoFastaParse operation middleware
func (sh *strictHandler) PostIoFastaParse(w http.ResponseWriter, r *http.Request) {
	var request PostIoFastaParseRequestObject

	data, err := io.ReadAll(r.Body)
	if err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't read body: %w", err))
		return
	}
	body := PostIoFastaParseTextRequestBody(data)
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostIoFastaParse(ctx, request.(PostIoFastaParseRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostIoFastaParse")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostIoFastaParseResponseObject); ok {
		if err := validResponse.VisitPostIoFastaParseResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostIoFastaWrite operation middleware
func (sh *strictHandler) PostIoFastaWrite(w http.ResponseWriter, r *http.Request) {
	var request PostIoFastaWriteRequestObject

	var body PostIoFastaWriteJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostIoFastaWrite(ctx, request.(PostIoFastaWriteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostIoFastaWrite")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostIoFastaWriteResponseObject); ok {
		if err := validResponse.VisitPostIoFastaWriteResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostIoFastqParse operation middleware
func (sh *strictHandler) PostIoFastqParse(w http.ResponseWriter, r *http.Request) {
	var request PostIoFastqParseRequestObject

	data, err := io.ReadAll(r.Body)
	if err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't read body: %w", err))
		return
	}
	body := PostIoFastqParseTextRequestBody(data)
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostIoFastqParse(ctx, request.(PostIoFastqParseRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostIoFastqParse")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostIoFastqParseResponseObject); ok {
		if err := validResponse.VisitPostIoFastqParseResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostIoFastqWrite operation middleware
func (sh *strictHandler) PostIoFastqWrite(w http.ResponseWriter, r *http.Request) {
	var request PostIoFastqWriteRequestObject

	var body PostIoFastqWriteJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostIoFastqWrite(ctx, request.(PostIoFastqWriteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostIoFastqWrite")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostIoFastqWriteResponseObject); ok {
		if err := validResponse.VisitPostIoFastqWriteResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostIoGenbankParse operation middleware
func (sh *strictHandler) PostIoGenbankParse(w http.ResponseWriter, r *http.Request) {
	var request PostIoGenbankParseRequestObject

	data, err := io.ReadAll(r.Body)
	if err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't read body: %w", err))
		return
	}
	body := PostIoGenbankParseTextRequestBody(data)
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostIoGenbankParse(ctx, request.(PostIoGenbankParseRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostIoGenbankParse")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostIoGenbankParseResponseObject); ok {
		if err := validResponse.VisitPostIoGenbankParseResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostIoGenbankWrite operation middleware
func (sh *strictHandler) PostIoGenbankWrite(w http.ResponseWriter, r *http.Request) {
	var request PostIoGenbankWriteRequestObject

	var body PostIoGenbankWriteJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostIoGenbankWrite(ctx, request.(PostIoGenbankWriteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostIoGenbankWrite")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostIoGenbankWriteResponseObject); ok {
		if err := validResponse.VisitPostIoGenbankWriteResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostIoPileupParse operation middleware
func (sh *strictHandler) PostIoPileupParse(w http.ResponseWriter, r *http.Request) {
	var request PostIoPileupParseRequestObject

	var body PostIoPileupParseJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostIoPileupParse(ctx, request.(PostIoPileupParseRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostIoPileupParse")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostIoPileupParseResponseObject); ok {
		if err := validResponse.VisitPostIoPileupParseResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostIoPileupWrite operation middleware
func (sh *strictHandler) PostIoPileupWrite(w http.ResponseWriter, r *http.Request) {
	var request PostIoPileupWriteRequestObject

	var body PostIoPileupWriteJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostIoPileupWrite(ctx, request.(PostIoPileupWriteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostIoPileupWrite")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostIoPileupWriteResponseObject); ok {
		if err := validResponse.VisitPostIoPileupWriteResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostIoSlow5Parse operation middleware
func (sh *strictHandler) PostIoSlow5Parse(w http.ResponseWriter, r *http.Request) {
	var request PostIoSlow5ParseRequestObject

	var body PostIoSlow5ParseJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostIoSlow5Parse(ctx, request.(PostIoSlow5ParseRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostIoSlow5Parse")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostIoSlow5ParseResponseObject); ok {
		if err := validResponse.VisitPostIoSlow5ParseResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostIoSlow5SvbCompress operation middleware
func (sh *strictHandler) PostIoSlow5SvbCompress(w http.ResponseWriter, r *http.Request) {
	var request PostIoSlow5SvbCompressRequestObject

	var body PostIoSlow5SvbCompressJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostIoSlow5SvbCompress(ctx, request.(PostIoSlow5SvbCompressRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostIoSlow5SvbCompress")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostIoSlow5SvbCompressResponseObject); ok {
		if err := validResponse.VisitPostIoSlow5SvbCompressResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostIoSlow5SvbDecompress operation middleware
func (sh *strictHandler) PostIoSlow5SvbDecompress(w http.ResponseWriter, r *http.Request) {
	var request PostIoSlow5SvbDecompressRequestObject

	var body PostIoSlow5SvbDecompressJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostIoSlow5SvbDecompress(ctx, request.(PostIoSlow5SvbDecompressRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostIoSlow5SvbDecompress")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostIoSlow5SvbDecompressResponseObject); ok {
		if err := validResponse.VisitPostIoSlow5SvbDecompressResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostIoSlow5Write operation middleware
func (sh *strictHandler) PostIoSlow5Write(w http.ResponseWriter, r *http.Request) {
	var request PostIoSlow5WriteRequestObject

	var body PostIoSlow5WriteJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostIoSlow5Write(ctx, request.(PostIoSlow5WriteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostIoSlow5Write")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostIoSlow5WriteResponseObject); ok {
		if err := validResponse.VisitPostIoSlow5WriteResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostPcrComplexPcr operation middleware
func (sh *strictHandler) PostPcrComplexPcr(w http.ResponseWriter, r *http.Request) {
	var request PostPcrComplexPcrRequestObject

	var body PostPcrComplexPcrJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostPcrComplexPcr(ctx, request.(PostPcrComplexPcrRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPcrComplexPcr")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostPcrComplexPcrResponseObject); ok {
		if err := validResponse.VisitPostPcrComplexPcrResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostPcrPrimersDebruijnBarcodes operation middleware
func (sh *strictHandler) PostPcrPrimersDebruijnBarcodes(w http.ResponseWriter, r *http.Request) {
	var request PostPcrPrimersDebruijnBarcodesRequestObject

	var body PostPcrPrimersDebruijnBarcodesJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostPcrPrimersDebruijnBarcodes(ctx, request.(PostPcrPrimersDebruijnBarcodesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPcrPrimersDebruijnBarcodes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostPcrPrimersDebruijnBarcodesResponseObject); ok {
		if err := validResponse.VisitPostPcrPrimersDebruijnBarcodesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostPcrPrimersDesignPrimers operation middleware
func (sh *strictHandler) PostPcrPrimersDesignPrimers(w http.ResponseWriter, r *http.Request) {
	var request PostPcrPrimersDesignPrimersRequestObject

	var body PostPcrPrimersDesignPrimersJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostPcrPrimersDesignPrimers(ctx, request.(PostPcrPrimersDesignPrimersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPcrPrimersDesignPrimers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostPcrPrimersDesignPrimersResponseObject); ok {
		if err := validResponse.VisitPostPcrPrimersDesignPrimersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostPcrPrimersMarmurDoty operation middleware
func (sh *strictHandler) PostPcrPrimersMarmurDoty(w http.ResponseWriter, r *http.Request) {
	var request PostPcrPrimersMarmurDotyRequestObject

	var body PostPcrPrimersMarmurDotyJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostPcrPrimersMarmurDoty(ctx, request.(PostPcrPrimersMarmurDotyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPcrPrimersMarmurDoty")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostPcrPrimersMarmurDotyResponseObject); ok {
		if err := validResponse.VisitPostPcrPrimersMarmurDotyResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostPcrPrimersMeltingTemperature operation middleware
func (sh *strictHandler) PostPcrPrimersMeltingTemperature(w http.ResponseWriter, r *http.Request) {
	var request PostPcrPrimersMeltingTemperatureRequestObject

	var body PostPcrPrimersMeltingTemperatureJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostPcrPrimersMeltingTemperature(ctx, request.(PostPcrPrimersMeltingTemperatureRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPcrPrimersMeltingTemperature")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostPcrPrimersMeltingTemperatureResponseObject); ok {
		if err := validResponse.VisitPostPcrPrimersMeltingTemperatureResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostPcrPrimersSantaLucia operation middleware
func (sh *strictHandler) PostPcrPrimersSantaLucia(w http.ResponseWriter, r *http.Request) {
	var request PostPcrPrimersSantaLuciaRequestObject

	var body PostPcrPrimersSantaLuciaJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostPcrPrimersSantaLucia(ctx, request.(PostPcrPrimersSantaLuciaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPcrPrimersSantaLucia")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostPcrPrimersSantaLuciaResponseObject); ok {
		if err := validResponse.VisitPostPcrPrimersSantaLuciaResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostPcrSimplePcr operation middleware
func (sh *strictHandler) PostPcrSimplePcr(w http.ResponseWriter, r *http.Request) {
	var request PostPcrSimplePcrRequestObject

	var body PostPcrSimplePcrJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostPcrSimplePcr(ctx, request.(PostPcrSimplePcrRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPcrSimplePcr")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostPcrSimplePcrResponseObject); ok {
		if err := validResponse.VisitPostPcrSimplePcrResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostRandomRandomDna operation middleware
func (sh *strictHandler) PostRandomRandomDna(w http.ResponseWriter, r *http.Request) {
	var request PostRandomRandomDnaRequestObject

	var body PostRandomRandomDnaJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostRandomRandomDna(ctx, request.(PostRandomRandomDnaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRandomRandomDna")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostRandomRandomDnaResponseObject); ok {
		if err := validResponse.VisitPostRandomRandomDnaResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostRandomRandomProtein operation middleware
func (sh *strictHandler) PostRandomRandomProtein(w http.ResponseWriter, r *http.Request) {
	var request PostRandomRandomProteinRequestObject

	var body PostRandomRandomProteinJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostRandomRandomProtein(ctx, request.(PostRandomRandomProteinRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRandomRandomProtein")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostRandomRandomProteinResponseObject); ok {
		if err := validResponse.VisitPostRandomRandomProteinResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostRandomRandomRna operation middleware
func (sh *strictHandler) PostRandomRandomRna(w http.ResponseWriter, r *http.Request) {
	var request PostRandomRandomRnaRequestObject

	var body PostRandomRandomRnaJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostRandomRandomRna(ctx, request.(PostRandomRandomRnaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRandomRandomRna")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostRandomRandomRnaResponseObject); ok {
		if err := validResponse.VisitPostRandomRandomRnaResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSeqhash operation middleware
func (sh *strictHandler) PostSeqhash(w http.ResponseWriter, r *http.Request) {
	var request PostSeqhashRequestObject

	var body PostSeqhashJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostSeqhash(ctx, request.(PostSeqhashRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSeqhash")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostSeqhashResponseObject); ok {
		if err := validResponse.VisitPostSeqhashResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSeqhashFragment operation middleware
func (sh *strictHandler) PostSeqhashFragment(w http.ResponseWriter, r *http.Request) {
	var request PostSeqhashFragmentRequestObject

	var body PostSeqhashFragmentJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostSeqhashFragment(ctx, request.(PostSeqhashFragmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSeqhashFragment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostSeqhashFragmentResponseObject); ok {
		if err := validResponse.VisitPostSeqhashFragmentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostUtilsIsPalindromic operation middleware
func (sh *strictHandler) PostUtilsIsPalindromic(w http.ResponseWriter, r *http.Request) {
	var request PostUtilsIsPalindromicRequestObject

	var body PostUtilsIsPalindromicJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostUtilsIsPalindromic(ctx, request.(PostUtilsIsPalindromicRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUtilsIsPalindromic")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostUtilsIsPalindromicResponseObject); ok {
		if err := validResponse.VisitPostUtilsIsPalindromicResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostUtilsReverseComplement operation middleware
func (sh *strictHandler) PostUtilsReverseComplement(w http.ResponseWriter, r *http.Request) {
	var request PostUtilsReverseComplementRequestObject

	var body PostUtilsReverseComplementJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostUtilsReverseComplement(ctx, request.(PostUtilsReverseComplementRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUtilsReverseComplement")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostUtilsReverseComplementResponseObject); ok {
		if err := validResponse.VisitPostUtilsReverseComplementResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xdbXPbtpP/KhjevVQjN73e9e93spyknrEdVfI/nbmbjAYiVxJqEmAA0A/t5LvfACBI",
	"kAJJyJYf0uZNIpm7i8XubxcLEID+imKW5YwClSI6/isS8RYyrD9OMkLZJCaJ+pJzlgOXBPSjKUsY1Z+I",
	"hEx/+E8O6+g4+o9xLW9cChtr8ujrKJL3OUTHEeYc36vv5yAlcMVePhGSE7qJvn4dRRy+FIRDEh3/n6Ub",
	"2YY/V6LY6g+IpZI1kRLH2wyo3NU3ZlSWD1oNjSKKMxjWQFONKkE+BU6wgCkrfO2vsABv47GlL58QKmED",
	"fKd5LcCS+xqfbjHdwG7L7znLvC3PmCCSMOprfBTNAYvGs5pxISH3M12xYTtWzZaCRkZDzVw16+2gxtBO",
	"/644yVPwe/Z3IJttiHWtkIqlU4ErvEo9Vq5CJTwm6ujyxMVCYi49QbbTxV1Glu/P1zKH23pD5MjtqM9G",
	"7+if9yaagBaZknUi8Fk0ik5WQv03w1+m+qvITs4cCbVi77GQeA4x4560QxKgkqyJN2WMIgFfCqBxQDQ7",
	"ghw2X4+UPl/mgD3anPVr8zFXOMeppsVJQszXWUNGl2NqBX4rcErkvT8Ugzt85na4Yqule7sOWBbcg3Ys",
	"JSerQkJv18JBu9NyAiLmJG+lp1pAymJsH/bF2Lml6weH1WDIiPppU7uRawynEUdHr2k53vhHqveM32Ke",
	"fLwBrjK6V9s53AAX0EsTDo1FH/w/AF1het0VkGsDkfCsZzHlQUEGEg+xXyiavSJdSx3Vig6E+6+AE+Cf",
	"cFr4snwQ7odD+h1NzEBnWrvAeYA8Z5zdEajy0wfOivzs1M+xSNntz5+AC39E+WSeOzHWLqayPIWsWU+t",
	"GEsB60gDmvi1WJMbmHGSwQxzSXDqZ9+srm3bC6Ofz6h/MEL9/EKNXn4FRLGyosMh6yaRncy15TDYpRYi",
	"jX7GTCPXmGWnPHbyNeQzVKuHn/1uLYTHp4THRYp5h0tMFjglN0R05eSMJWRNTNOnWEIHUQpxkcKVP992",
	"FuN11E5Z0gUJS3IOdCO3wSV9i62l5G7nPV3dUW9UG9TnhIsy1bWG1TgG0WnflTu7CAJuPR/xIDfpclEC",
	"a0JJ59B7Dfe3jCeia1wuQuKpEL2+ZnyDKRFZx0OyIX7dmNyaWuzhqZnDGrhyZHh+mFsWn5kFK3hXzYHv",
	"GGXZ/X610k1fEnfRnRhgOu4cOQirBTkudSxfae7oWdneOrphLheh1hWlj30h8NHxsZ0rvFMm5STeEoxi",
	"lhI1YTDfciwk40R4pwwzkkKRnxPqGbL7Z7l9tbUaU6dds3PzeA6iSOWexW4Fl5OuNYEHlG4jd17dbMHt",
	"SVPt/uq/hvVuoirklnHRsaBBBeOSFFnHsF1w2hgm62d5sbqAxPuI28WN3SeQYX7ttzyRaYARbW8sQ61k",
	"pVLVjNWk0U+f9XTBZcq7Xfs5RWZ4mnErU98E3q+Cf+Y63WJKIb0sslXH5PWUbIgkArdihxoOt4b1sldP",
	"H1/bngOd49sF2TRh47BcQEIwPYE14+DV9eN6LRpLRPWjeQtY7hOn0XZ47yrsxPdALa4IGs+aOWfHKW4Z",
	"j7M8JXQzbw7etdJ65eaiuOtgV0+vSGPUdZfEWrZXfyJ0bRb1TCxFp5cTlIAgG4omszNnGDmOjt4cvflR",
	"D8M5UJyT6Dj66c3RmyMVRlhutfnGOCUbOs6w0PVZzoR2i4KEhtpZEh2rVCYniu5CkZlgBSFPWHLfWsvF",
	"eZ6Wddj4jxKLJl52MX+dAV8K8id0TA3KVLrEvbXlcuV/fA0y3naKb88A6rYakkeOkk2Zn73OqWVKXoD+",
	"g8gZFabDb4+OHmGuhAiJm4OQhZkfKY01m0i5DlkZiOsRR3OKIsswv4+OoylOVYUsAWniU9ugqjg2Qmdm",
	"BYLos2JzgLPMML0PRM+FIj0UglRSxpwIRpfWaXuO/YEYPCDEyhnmjtovC7W2xeoE1hrWdnB1ToREbI0a",
	"+BJhyEKTDSZUSKRQgRaOLboBRwGSFDJMl7cFFXFI1rq0LL8bjkPB7zEZKjABPX+a0VbOgMqOXtXPOxJv",
	"7B/0Q3LUxMou85NAt0RukRHZRNQM+JrxDFW+/cE4F1UyelEkMiK3y1ssgWeYBmBooRh+t/TfEfT3QZD2",
	"7A/WtYP4iRMxXpM7FzJNFd6TOxAoZlnGKMo5W6WQCUQomp4u9P85hxwbjKE140hVcOKeyi0IIt5EIw8E",
	"p4l4T+4OBjt3OadvhlMtCZhpHbuBxcOG2fC3A84w6Sx9tBv3gfqwII712/s9NlSYt/2H6rtt/nMA5hXg",
	"EoUuZOQayKfluGwlfR1F/7VjEQl3cpynmLRs0dZzp81/C+CI0LyQCDhnulL4+XDiz6gENeFHAvgNcNtG",
	"I37fkzvVaSdM40Q4QcpySbKyNvNH6vzyA1oAJCiBNdbJQjJ01BWAH628l4xCAZDsXaoGhNhTBNSgl6+2",
	"gKyXElSp9bdDqkWOguubTrxKjqlIy3WE7mpkmoirivLQdYg/mZfNEUaX0u62KUMmOv7xx9HQ1GdXQO87",
	"3+dAnrVgDTtUd/iZ4VEp053OUkYJ3YzX7iaFboQY6mpHw6FAAndxWiSwZOUuhz1rgAzfLW0HqklzBaOf",
	"jo5GnqyWEdrD9NbP9KBUuNuST+WnLzxgvSYxARrfN7p69OZf/xrtzs6tdo/ZXFbLGLmth5QeEyVQVRmV",
	"DIRpgjBapwzLlygKSj10Ua2K6w8sTYB+MMmyiiwTIa3o2mjS5WY4BRuGhugDhVi1W6+vICj39DlI39f9",
	"oRhuOqDuMMJCQLZK79UEJyliWWZP8QIuX5DMLC151Bv0eUqC3X1uSB/u6rDtWDZre5begpxk1Ex2HeM3",
	"mjaAeUvZbykOSlKsB/GEbECEjULzmu3UcL10rATttgo09m7+e8kAcFyEEmvsDq+yxBZjYoyTpPw44NJq",
	"v7WYJIn5cMC1fCv8x6DDC2bft36/bb+93YexNQi6zTdlPscCWrDSOwC5hFukKZAmQWvOMjQpX+62gDJJ",
	"EnR1y1x6d63dxYQPJko3zjIiYF+0TCvO76B5PaCxPnHx0H5vw0HPS/y04dApy9ilXW/Q/d2ABzkfwAXO",
	"qeH7WLEd+DVXZ4nU+Zqr7AmyPUEUZzuvuz6ARKXqyOqOLjVhuM1UJC/LrY7Bkfaes6zcIf4EQbZfjG3a",
	"O9X7WJvb2tuB1hTlhto3EGnmBBMkw3HmozQZvTQPqiwQiqIN1FFXr94EYekDVIFn4/3wC5/98/Pe9cnX",
	"42XjLmncxTiSW0Aih5isCSRVqvAkiYafGUeYVvliDx9TuA126iXcHsyPuvl6d1SG70hWZNHxTz/p5RTz",
	"JWB50BHzTRVb/iBuE/X6Ee4gLiQs0wL3u/CdITwv8MHch6vjuXuckayP9PpedWlbBSy7GbqnX0xLmf9g",
	"AitkXgQoWtKNtKCQBbFFoTd0r4sUlbzPPx+cFxRhlBYYlXauEahgZoC3ZmliFkAoYK6+jZV+HC/V5+XN",
	"2344vjfs5xX3VDOrP396+xyvJboWcl9gXx6TyxXH8XXHmefHbGcozWw3M7QTjrY5UkRIW926uXRut6tv",
	"CFCKl5wad+/p60+ae061u5/pHRRkWq/y9Gv92uB/Rh67/uORYTyE5pcTVPqoHxp/FtfltvghFPyvpvzu",
	"89fnc+0ZVNJ0epyw8RoLicc55mJgLnDG9Nn/mabsc3nwcHawbaq9S+jOhQUBM3vdvQS9nyyuJohrtpdY",
	"xdVqlFokWB+Rth4krO28W05kmPN+15RP/dKi3+JBS+mm52uSAlK9k0CRqIqp9L5lLd2tMGt9CYf6l28R",
	"6uYujP2A/lsN9A4Q/jZs1mAQfnk2EHbaIhiCvz0Agr22KpeuwkBYLvN8azBsLd4FQ9Guar101rV6BLgx",
	"CPSlvGeB/aDtw17tlxbYD/wBdsv1UeAw9Jtjw8Pg36sewxIHHc3Gz3vOps+lzvHpgFiq3kEbNqT4/Hm9",
	"JDgd9FYQyI20x2K8tV6jdT+InZ6/8u9E2mBhXzpGSUAOXzvchv0nUnb7c1iw6cPIf+tYayq3rY5+90HK",
	"PSWu28d7XCBXn+8OhKN3UNQ+NCnVF8Tm8SAGxM1qqV/YgxBBUFjcrKaW/lCA4A86sf1qQncUZVhcPzCm",
	"rTEhQRzfImHs0F7AMzRojm+RsZQ5vLH4dDLo3QT29e9pzfHEIT+K0sFLAvay7VN6/5AobWKgNngfCmqq",
	"vXEQNFBr9x92nH6NyfSVju11Og+vq/tzfB7zsbmk7G6ZxwPLtrOYTw3tLD7cum3/5WQ5Jxnwfa+cxHwD",
	"cimzxlrvfx95Nr1LyPIUS3jMpvdaRq2vq8RTvJt8+O6j2XT+mnZaz6ZzB5gKgzUyS2OOE1jxgvxBlyvM",
	"Y5YM7RacxXxmOE9LxhPLdyjQrjClkDz0poiyG8u0fZedM0Js4iX3X/qc4bvlJvZesJAR6n/ku3tHyRHF",
	"aul5cdJ9UXVDcY8MR/HPj94JvQGqfAsJKhtGtcHbG2AMJToFdKJdXpH+sMKiliACwKZG1qWTeMKQprhm",
	"VfQfBmZrc19sdUyqkc+iaOS7MUvfHrsHR/97M53ErjI/pDqOP1VMzz8zswYz3uu4U8xYqJMk7PWZbkef",
	"UCoFIouYdkWm71NSWXfmjA19CMwwzwq+TJi8D4XfhWY5VRyvbMNEUMRXd7okKINUErpBzhtbhIU9BNZ1",
	"E0zJdOUwFUL9xRgGKcugDOSWJcPmN8KWrXfGQW4wrI4a391R2aHf6gJTiZdpERMcau2FYjnXHIeycoY3",
	"FAQpsimjMVDJu+/IM4oP0wmcygCqh5wz9anga3DU1a8nQsgIJb+OULKokCIeELnau0i7dyhyBVGzkqAJ",
	"zEKTPt/85RAD0oMmNAEX3lvKHS13dHrq2czglOKVTVowMpDrnL1wTBOWlf8tEzqQ0+aazvx7Sg+Xzvom",
	"GPb6D1qkqdnLr8qxwR3WpcjnL+32PHPZ9q8xrrkgqbodxD+HcEgXblVrnGx86vVzzpkEQsN9PSsZvvv7",
	"qfxdWjjU55Z8P7/zfeJ7/j2+n9Df8/D4ngfEt4Av28HrbBcl0fNUFAkrVikspNKzcYGT+ysZvXeNlg/t",
	"zzTYC9pPLyfRKJrNP169O7uMRtH8cuK5kb27Gm3IdX4jYUflF3hhW/rwAbiyCEFaRqsesM9+xWLb3Clr",
	"gdOA0TLs0p0STwe/dGfd/PWh+pc01oxnWJqk8EvkuwaHN3+UaB/WB81s/Kp26fFNAaq6VkbsgSx9os8B",
	"hB9mhSSpGBOxzHFKaMJZRuJ+qP1bcZyJmUP/jzpwQxpd9/+8T8Bmi0oEEhLLYme6u4X4GpF1NdwgIlDT",
	"5tah2oUNd9qpWPOHmQZcWv6I2NT9/aF/kFsfW0uUK7q1ybtqCktZGxqxddfMofKtzopqlqn+/FdU8DQ6",
	"jrZS5uJ4PE4oNq8g3qwIG+OcRF9HLs3xeJyyGKdbJuTxL0e/HBmaz1//PwAA//9s4PMu7XUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
