// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Fix CDS
	// (POST /design/cds/fix)
	PostDesignCdsFix(w http.ResponseWriter, r *http.Request)
	// Optimize CDS.
	// (POST /design/cds/optimize)
	PostDesignCdsOptimize(w http.ResponseWriter, r *http.Request)
	// Translate CDS
	// (POST /design/cds/translate)
	PostDesignCdsTranslate(w http.ResponseWriter, r *http.Request)
	// Run a lua script
	// (POST /execute_lua)
	PostExecuteLua(w http.ResponseWriter, r *http.Request)
	// Parse FASTA data
	// (POST /io/fasta/parse)
	PostIoFastaParse(w http.ResponseWriter, r *http.Request)
	// Simulate PCR
	// (POST /simulate/complex_pcr)
	PostSimulateComplexPcr(w http.ResponseWriter, r *http.Request)
	// Fragment CDS
	// (POST /simulate/fragment)
	PostSimulateFragment(w http.ResponseWriter, r *http.Request)
	// Simulate Golden Gate assembly
	// (POST /simulate/goldengate)
	PostSimulateGoldengate(w http.ResponseWriter, r *http.Request)
	// Simulate ligation
	// (POST /simulate/ligate)
	PostSimulateLigate(w http.ResponseWriter, r *http.Request)
	// Simulate a simple PCR
	// (POST /simulate/pcr)
	PostSimulatePcr(w http.ResponseWriter, r *http.Request)
	// Simulate restriction digest
	// (POST /simulate/restriction_digest)
	PostSimulateRestrictionDigest(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Fix CDS
// (POST /design/cds/fix)
func (_ Unimplemented) PostDesignCdsFix(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Optimize CDS.
// (POST /design/cds/optimize)
func (_ Unimplemented) PostDesignCdsOptimize(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Translate CDS
// (POST /design/cds/translate)
func (_ Unimplemented) PostDesignCdsTranslate(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Run a lua script
// (POST /execute_lua)
func (_ Unimplemented) PostExecuteLua(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Parse FASTA data
// (POST /io/fasta/parse)
func (_ Unimplemented) PostIoFastaParse(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Simulate PCR
// (POST /simulate/complex_pcr)
func (_ Unimplemented) PostSimulateComplexPcr(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fragment CDS
// (POST /simulate/fragment)
func (_ Unimplemented) PostSimulateFragment(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Simulate Golden Gate assembly
// (POST /simulate/goldengate)
func (_ Unimplemented) PostSimulateGoldengate(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Simulate ligation
// (POST /simulate/ligate)
func (_ Unimplemented) PostSimulateLigate(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Simulate a simple PCR
// (POST /simulate/pcr)
func (_ Unimplemented) PostSimulatePcr(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Simulate restriction digest
// (POST /simulate/restriction_digest)
func (_ Unimplemented) PostSimulateRestrictionDigest(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostDesignCdsFix operation middleware
func (siw *ServerInterfaceWrapper) PostDesignCdsFix(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDesignCdsFix(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostDesignCdsOptimize operation middleware
func (siw *ServerInterfaceWrapper) PostDesignCdsOptimize(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDesignCdsOptimize(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostDesignCdsTranslate operation middleware
func (siw *ServerInterfaceWrapper) PostDesignCdsTranslate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDesignCdsTranslate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostExecuteLua operation middleware
func (siw *ServerInterfaceWrapper) PostExecuteLua(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostExecuteLua(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostIoFastaParse operation middleware
func (siw *ServerInterfaceWrapper) PostIoFastaParse(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostIoFastaParse(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostSimulateComplexPcr operation middleware
func (siw *ServerInterfaceWrapper) PostSimulateComplexPcr(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSimulateComplexPcr(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostSimulateFragment operation middleware
func (siw *ServerInterfaceWrapper) PostSimulateFragment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSimulateFragment(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostSimulateGoldengate operation middleware
func (siw *ServerInterfaceWrapper) PostSimulateGoldengate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSimulateGoldengate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostSimulateLigate operation middleware
func (siw *ServerInterfaceWrapper) PostSimulateLigate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSimulateLigate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostSimulatePcr operation middleware
func (siw *ServerInterfaceWrapper) PostSimulatePcr(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSimulatePcr(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostSimulateRestrictionDigest operation middleware
func (siw *ServerInterfaceWrapper) PostSimulateRestrictionDigest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSimulateRestrictionDigest(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/design/cds/fix", wrapper.PostDesignCdsFix)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/design/cds/optimize", wrapper.PostDesignCdsOptimize)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/design/cds/translate", wrapper.PostDesignCdsTranslate)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/execute_lua", wrapper.PostExecuteLua)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/io/fasta/parse", wrapper.PostIoFastaParse)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/simulate/complex_pcr", wrapper.PostSimulateComplexPcr)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/simulate/fragment", wrapper.PostSimulateFragment)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/simulate/goldengate", wrapper.PostSimulateGoldengate)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/simulate/ligate", wrapper.PostSimulateLigate)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/simulate/pcr", wrapper.PostSimulatePcr)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/simulate/restriction_digest", wrapper.PostSimulateRestrictionDigest)
	})

	return r
}

type PostDesignCdsFixRequestObject struct {
	Body *PostDesignCdsFixJSONRequestBody
}

type PostDesignCdsFixResponseObject interface {
	VisitPostDesignCdsFixResponse(w http.ResponseWriter) error
}

type PostDesignCdsFix200JSONResponse struct {
	Changes  []Change `json:"changes"`
	Sequence string   `json:"sequence"`
}

func (response PostDesignCdsFix200JSONResponse) VisitPostDesignCdsFixResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostDesignCdsFix400TextResponse string

func (response PostDesignCdsFix400TextResponse) VisitPostDesignCdsFixResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

type PostDesignCdsFix500TextResponse string

func (response PostDesignCdsFix500TextResponse) VisitPostDesignCdsFixResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type PostDesignCdsOptimizeRequestObject struct {
	Body *PostDesignCdsOptimizeJSONRequestBody
}

type PostDesignCdsOptimizeResponseObject interface {
	VisitPostDesignCdsOptimizeResponse(w http.ResponseWriter) error
}

type PostDesignCdsOptimize200JSONResponse string

func (response PostDesignCdsOptimize200JSONResponse) VisitPostDesignCdsOptimizeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostDesignCdsOptimize400TextResponse string

func (response PostDesignCdsOptimize400TextResponse) VisitPostDesignCdsOptimizeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

type PostDesignCdsOptimize500TextResponse string

func (response PostDesignCdsOptimize500TextResponse) VisitPostDesignCdsOptimizeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type PostDesignCdsTranslateRequestObject struct {
	Body *PostDesignCdsTranslateJSONRequestBody
}

type PostDesignCdsTranslateResponseObject interface {
	VisitPostDesignCdsTranslateResponse(w http.ResponseWriter) error
}

type PostDesignCdsTranslate200JSONResponse string

func (response PostDesignCdsTranslate200JSONResponse) VisitPostDesignCdsTranslateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostDesignCdsTranslate500TextResponse string

func (response PostDesignCdsTranslate500TextResponse) VisitPostDesignCdsTranslateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type PostExecuteLuaRequestObject struct {
	Body *PostExecuteLuaJSONRequestBody
}

type PostExecuteLuaResponseObject interface {
	VisitPostExecuteLuaResponse(w http.ResponseWriter) error
}

type PostExecuteLua200JSONResponse struct {
	Log    string `json:"log"`
	Output string `json:"output"`
}

func (response PostExecuteLua200JSONResponse) VisitPostExecuteLuaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostExecuteLua500TextResponse string

func (response PostExecuteLua500TextResponse) VisitPostExecuteLuaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type PostIoFastaParseRequestObject struct {
	Body *PostIoFastaParseTextRequestBody
}

type PostIoFastaParseResponseObject interface {
	VisitPostIoFastaParseResponse(w http.ResponseWriter) error
}

type PostIoFastaParse200JSONResponse []FastaRecord

func (response PostIoFastaParse200JSONResponse) VisitPostIoFastaParseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostIoFastaParse500TextResponse string

func (response PostIoFastaParse500TextResponse) VisitPostIoFastaParseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type PostSimulateComplexPcrRequestObject struct {
	Body *PostSimulateComplexPcrJSONRequestBody
}

type PostSimulateComplexPcrResponseObject interface {
	VisitPostSimulateComplexPcrResponse(w http.ResponseWriter) error
}

type PostSimulateComplexPcr200JSONResponse []string

func (response PostSimulateComplexPcr200JSONResponse) VisitPostSimulateComplexPcrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSimulateComplexPcr500TextResponse string

func (response PostSimulateComplexPcr500TextResponse) VisitPostSimulateComplexPcrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type PostSimulateFragmentRequestObject struct {
	Body *PostSimulateFragmentJSONRequestBody
}

type PostSimulateFragmentResponseObject interface {
	VisitPostSimulateFragmentResponse(w http.ResponseWriter) error
}

type PostSimulateFragment200JSONResponse struct {
	Efficiency float32  `json:"efficiency"`
	Fragments  []string `json:"fragments"`
}

func (response PostSimulateFragment200JSONResponse) VisitPostSimulateFragmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSimulateFragment500TextResponse string

func (response PostSimulateFragment500TextResponse) VisitPostSimulateFragmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type PostSimulateGoldengateRequestObject struct {
	Body *PostSimulateGoldengateJSONRequestBody
}

type PostSimulateGoldengateResponseObject interface {
	VisitPostSimulateGoldengateResponse(w http.ResponseWriter) error
}

type PostSimulateGoldengate200Response struct {
}

func (response PostSimulateGoldengate200Response) VisitPostSimulateGoldengateResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostSimulateGoldengate500TextResponse string

func (response PostSimulateGoldengate500TextResponse) VisitPostSimulateGoldengateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type PostSimulateLigateRequestObject struct {
	Body *PostSimulateLigateJSONRequestBody
}

type PostSimulateLigateResponseObject interface {
	VisitPostSimulateLigateResponse(w http.ResponseWriter) error
}

type PostSimulateLigate200Response struct {
}

func (response PostSimulateLigate200Response) VisitPostSimulateLigateResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostSimulatePcrRequestObject struct {
	Body *PostSimulatePcrJSONRequestBody
}

type PostSimulatePcrResponseObject interface {
	VisitPostSimulatePcrResponse(w http.ResponseWriter) error
}

type PostSimulatePcr200JSONResponse string

func (response PostSimulatePcr200JSONResponse) VisitPostSimulatePcrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSimulatePcr500TextResponse string

func (response PostSimulatePcr500TextResponse) VisitPostSimulatePcrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type PostSimulateRestrictionDigestRequestObject struct {
	Body *PostSimulateRestrictionDigestJSONRequestBody
}

type PostSimulateRestrictionDigestResponseObject interface {
	VisitPostSimulateRestrictionDigestResponse(w http.ResponseWriter) error
}

type PostSimulateRestrictionDigest200Response struct {
}

func (response PostSimulateRestrictionDigest200Response) VisitPostSimulateRestrictionDigestResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostSimulateRestrictionDigest500TextResponse string

func (response PostSimulateRestrictionDigest500TextResponse) VisitPostSimulateRestrictionDigestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Fix CDS
	// (POST /design/cds/fix)
	PostDesignCdsFix(ctx context.Context, request PostDesignCdsFixRequestObject) (PostDesignCdsFixResponseObject, error)
	// Optimize CDS.
	// (POST /design/cds/optimize)
	PostDesignCdsOptimize(ctx context.Context, request PostDesignCdsOptimizeRequestObject) (PostDesignCdsOptimizeResponseObject, error)
	// Translate CDS
	// (POST /design/cds/translate)
	PostDesignCdsTranslate(ctx context.Context, request PostDesignCdsTranslateRequestObject) (PostDesignCdsTranslateResponseObject, error)
	// Run a lua script
	// (POST /execute_lua)
	PostExecuteLua(ctx context.Context, request PostExecuteLuaRequestObject) (PostExecuteLuaResponseObject, error)
	// Parse FASTA data
	// (POST /io/fasta/parse)
	PostIoFastaParse(ctx context.Context, request PostIoFastaParseRequestObject) (PostIoFastaParseResponseObject, error)
	// Simulate PCR
	// (POST /simulate/complex_pcr)
	PostSimulateComplexPcr(ctx context.Context, request PostSimulateComplexPcrRequestObject) (PostSimulateComplexPcrResponseObject, error)
	// Fragment CDS
	// (POST /simulate/fragment)
	PostSimulateFragment(ctx context.Context, request PostSimulateFragmentRequestObject) (PostSimulateFragmentResponseObject, error)
	// Simulate Golden Gate assembly
	// (POST /simulate/goldengate)
	PostSimulateGoldengate(ctx context.Context, request PostSimulateGoldengateRequestObject) (PostSimulateGoldengateResponseObject, error)
	// Simulate ligation
	// (POST /simulate/ligate)
	PostSimulateLigate(ctx context.Context, request PostSimulateLigateRequestObject) (PostSimulateLigateResponseObject, error)
	// Simulate a simple PCR
	// (POST /simulate/pcr)
	PostSimulatePcr(ctx context.Context, request PostSimulatePcrRequestObject) (PostSimulatePcrResponseObject, error)
	// Simulate restriction digest
	// (POST /simulate/restriction_digest)
	PostSimulateRestrictionDigest(ctx context.Context, request PostSimulateRestrictionDigestRequestObject) (PostSimulateRestrictionDigestResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHttpHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// PostDesignCdsFix operation middleware
func (sh *strictHandler) PostDesignCdsFix(w http.ResponseWriter, r *http.Request) {
	var request PostDesignCdsFixRequestObject

	var body PostDesignCdsFixJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostDesignCdsFix(ctx, request.(PostDesignCdsFixRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostDesignCdsFix")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostDesignCdsFixResponseObject); ok {
		if err := validResponse.VisitPostDesignCdsFixResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostDesignCdsOptimize operation middleware
func (sh *strictHandler) PostDesignCdsOptimize(w http.ResponseWriter, r *http.Request) {
	var request PostDesignCdsOptimizeRequestObject

	var body PostDesignCdsOptimizeJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostDesignCdsOptimize(ctx, request.(PostDesignCdsOptimizeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostDesignCdsOptimize")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostDesignCdsOptimizeResponseObject); ok {
		if err := validResponse.VisitPostDesignCdsOptimizeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostDesignCdsTranslate operation middleware
func (sh *strictHandler) PostDesignCdsTranslate(w http.ResponseWriter, r *http.Request) {
	var request PostDesignCdsTranslateRequestObject

	var body PostDesignCdsTranslateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostDesignCdsTranslate(ctx, request.(PostDesignCdsTranslateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostDesignCdsTranslate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostDesignCdsTranslateResponseObject); ok {
		if err := validResponse.VisitPostDesignCdsTranslateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostExecuteLua operation middleware
func (sh *strictHandler) PostExecuteLua(w http.ResponseWriter, r *http.Request) {
	var request PostExecuteLuaRequestObject

	var body PostExecuteLuaJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostExecuteLua(ctx, request.(PostExecuteLuaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostExecuteLua")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostExecuteLuaResponseObject); ok {
		if err := validResponse.VisitPostExecuteLuaResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostIoFastaParse operation middleware
func (sh *strictHandler) PostIoFastaParse(w http.ResponseWriter, r *http.Request) {
	var request PostIoFastaParseRequestObject

	data, err := io.ReadAll(r.Body)
	if err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't read body: %w", err))
		return
	}
	body := PostIoFastaParseTextRequestBody(data)
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostIoFastaParse(ctx, request.(PostIoFastaParseRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostIoFastaParse")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostIoFastaParseResponseObject); ok {
		if err := validResponse.VisitPostIoFastaParseResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSimulateComplexPcr operation middleware
func (sh *strictHandler) PostSimulateComplexPcr(w http.ResponseWriter, r *http.Request) {
	var request PostSimulateComplexPcrRequestObject

	var body PostSimulateComplexPcrJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostSimulateComplexPcr(ctx, request.(PostSimulateComplexPcrRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSimulateComplexPcr")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostSimulateComplexPcrResponseObject); ok {
		if err := validResponse.VisitPostSimulateComplexPcrResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSimulateFragment operation middleware
func (sh *strictHandler) PostSimulateFragment(w http.ResponseWriter, r *http.Request) {
	var request PostSimulateFragmentRequestObject

	var body PostSimulateFragmentJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostSimulateFragment(ctx, request.(PostSimulateFragmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSimulateFragment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostSimulateFragmentResponseObject); ok {
		if err := validResponse.VisitPostSimulateFragmentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSimulateGoldengate operation middleware
func (sh *strictHandler) PostSimulateGoldengate(w http.ResponseWriter, r *http.Request) {
	var request PostSimulateGoldengateRequestObject

	var body PostSimulateGoldengateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostSimulateGoldengate(ctx, request.(PostSimulateGoldengateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSimulateGoldengate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostSimulateGoldengateResponseObject); ok {
		if err := validResponse.VisitPostSimulateGoldengateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSimulateLigate operation middleware
func (sh *strictHandler) PostSimulateLigate(w http.ResponseWriter, r *http.Request) {
	var request PostSimulateLigateRequestObject

	var body PostSimulateLigateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostSimulateLigate(ctx, request.(PostSimulateLigateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSimulateLigate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostSimulateLigateResponseObject); ok {
		if err := validResponse.VisitPostSimulateLigateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSimulatePcr operation middleware
func (sh *strictHandler) PostSimulatePcr(w http.ResponseWriter, r *http.Request) {
	var request PostSimulatePcrRequestObject

	var body PostSimulatePcrJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostSimulatePcr(ctx, request.(PostSimulatePcrRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSimulatePcr")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostSimulatePcrResponseObject); ok {
		if err := validResponse.VisitPostSimulatePcrResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSimulateRestrictionDigest operation middleware
func (sh *strictHandler) PostSimulateRestrictionDigest(w http.ResponseWriter, r *http.Request) {
	var request PostSimulateRestrictionDigestRequestObject

	var body PostSimulateRestrictionDigestJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostSimulateRestrictionDigest(ctx, request.(PostSimulateRestrictionDigestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSimulateRestrictionDigest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostSimulateRestrictionDigestResponseObject); ok {
		if err := validResponse.VisitPostSimulateRestrictionDigestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xZTW/bOBP+KwTf9yhYbru7aH1LnLoIULSBnT0tCoOmRjYLimRJKrVb5L8vSEqyHDGy",
	"0jhJsSdX5XA488wzH2R+YioLJQUIa/DkJzZ0AwXx/zyzltBNAcK6L6WlAm0Z+DUqha0W7E4BnmBjNRNr",
	"fJtgQQqILNwmWMO3kmnI8OSfIJU0ir4ktbxcfQVqnaLphog1dA+faVlET76ShlkmRWuRCQtr0G51DsQc",
	"rO03Liyo+KZredyV5thKURIs9JubY2MOvhc/dgErEGXhVJ0bcokTfL4y7ueKfJv6T1OcX7Y07A2fEWPJ",
	"HKjUWRenewKRYAPfShB0eJSaDTEvZpqs4yyZSf2d6OzzDWgXyqgtc7gBbaBXZjHY3kWfoZ/1mghmijbg",
	"7x3hNaMbRhCVnDnUw5cixkrNTAR3dyoTeaAGs9ytXXw6QxkYthbo7MoFzbnluYjHo/HolTNAKhBEMTzB",
	"b0bj0RgnWBG78VClYW9KM5PmbOuxlMZjmoGhmqlAbDxjWzCIyqKQAiktVxwKg5hA04uF/1UaFNHEiaNc",
	"auQMMzthN2CYGWFvRVi+zPDEkdde+LOnmZmxLQ6AgrHnMtvdyXWiFGfUb06/VskUKkY3+LKF9v815HiC",
	"/5fui01aVZq0iYoPZSFvoA6iV8MsFCbKiuo/iNZk9zBWN5LJ3sru4V0K3QZFRklhgnWvx+NHQER9gTt0",
	"sw+qqiCeyvf6+JijSYR2meMYCnrRd2Y3iDNjkcxRrek2wX90ELGwtanihN3BIpJUh2f+bUAjJlRpEWgt",
	"fT3+83TqL4UFLQhHBvQN6PoMh2ZZFETvgtvOaZxgS9bG4Uczg784oXbGSmVZwX7A/Wk7//QBLQAylEFO",
	"Sm4NshKN+7Pxc631JVPSAGTx1vi4fHuK7Doa8usNoDpWGWrM+s/RtmaO4+7oGHmtJsJwYg/Y20PL60b+",
	"VLzsYVKCa/OYFEtLVhxCcvkswpNXr5IONe+wr6ugd6B5DhrWCO45iPYOPzNXGmPuLXSwBVpaWPKS9FPk",
	"fRD8WJKTUYM0l5DhbbJ1cYm1So/PgKIV5J5+CuAyPvXK0qpygKGVXOIVDenli5JSMCYvOar2Pj/r5qVA",
	"BPGSoArnPfEczQLxmExzd8FJFdHmSHm6lP4udOUl+9g32K3HRnkQV9sXuA5Zu9B69zI0O1tcnyHtt5kX",
	"iJ43o7IiI5a0osdkFTzDitKVFe81h+1SUd0fwkW1Yxo2XFF9sjJCmaYlJ7qFwEpKDkQ49JRmBegHXjcs",
	"0WuwS1sc9KO/xo2kKItVmJQsFMo59qAT7naxRsfe3rYRT1GnBpva5el07i6nWUlt1dlegqY1odDVdN6i",
	"aM3Mu0TN2w8ZR1naPHuciqOwpbzMYCmrp5AH8rEg22XtwdJUl5GGl2/G4yQywxdM9Gx6Hd/0S4N/96SY",
	"yU/fbSHPGWUg6O7A1fHo3btI5tbWPSZz9zqS9ulDOvWZU+gu2I0ORESGCMq5JC/RtmvS35kV78uoteQZ",
	"iPXRu0WdUx/28ifLquaNta8NVy+xLXI/NOJDaXuIeXAYfXBFihgDxYrvfqfCGbNvQNw5Gx7zj+yR8R42",
	"Z9XVOtK8BkUqmJl1gxMHziMQ/iZwDKzBc9HzDUR5eLhfhkEjmgA6vNv3ifzChHS8pTSSHSs7Nj31eHQ0",
	"1X6zKYggw9xkPXAc0uDOpf7dJGNrMAMHo/l+30XY9tK1PM6qX6vY3Zb8kiFtxQhlNdixwHo0nD638hOX",
	"muMJ3lirzCRNM0HCe+BoxWRKFMO3SVtmkqZcUsI30tjJ2/HbcZD5cvtvAAAA//9MXMXoPh4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
