// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Fix CDS
	// (POST /cds/fix)
	PostCdsFix(w http.ResponseWriter, r *http.Request)
	// Optimize CDS.
	// (POST /cds/optimize)
	PostCdsOptimize(w http.ResponseWriter, r *http.Request)
	// Translate CDS
	// (POST /cds/translate)
	PostCdsTranslate(w http.ResponseWriter, r *http.Request)
	// Simulate Golden Gate assembly
	// (POST /cloning/goldengate)
	PostCloningGoldengate(w http.ResponseWriter, r *http.Request)
	// Simulate ligation
	// (POST /cloning/ligate)
	PostCloningLigate(w http.ResponseWriter, r *http.Request)
	// Simulate restriction digest
	// (POST /cloning/restriction_digest)
	PostCloningRestrictionDigest(w http.ResponseWriter, r *http.Request)
	// Run a lua script
	// (POST /execute_lua)
	PostExecuteLua(w http.ResponseWriter, r *http.Request)
	// Parse FASTA data
	// (POST /io/fasta/parse)
	PostIoFastaParse(w http.ResponseWriter, r *http.Request)
	// Write FASTA data
	// (POST /io/fasta/write)
	PostIoFastaWrite(w http.ResponseWriter, r *http.Request)
	// Parse FASTQ data
	// (POST /io/fastq/parse)
	PostIoFastqParse(w http.ResponseWriter, r *http.Request)
	// Write FASTQ data
	// (POST /io/fastq/write)
	PostIoFastqWrite(w http.ResponseWriter, r *http.Request)
	// Parse Genbank data
	// (POST /io/genbank/parse)
	PostIoGenbankParse(w http.ResponseWriter, r *http.Request)
	// Write Genbank data
	// (POST /io/genbank/write)
	PostIoGenbankWrite(w http.ResponseWriter, r *http.Request)
	// Simulate PCR
	// (POST /pcr/complex_pcr)
	PostPcrComplexPcr(w http.ResponseWriter, r *http.Request)
	// Generate De Bruijn sequence-based barcodes
	// (POST /pcr/primers/debruijn_barcodes)
	PostPcrPrimersDebruijnBarcodes(w http.ResponseWriter, r *http.Request)
	// Calculate Melting Temperature using Marmur Doty method
	// (POST /pcr/primers/marmur_doty)
	PostPcrPrimersMarmurDoty(w http.ResponseWriter, r *http.Request)
	// Calculate Melting Temperature
	// (POST /pcr/primers/melting_temperature)
	PostPcrPrimersMeltingTemperature(w http.ResponseWriter, r *http.Request)
	// Calculate Melting Temperature using Santa Lucia method
	// (POST /pcr/primers/santa_lucia)
	PostPcrPrimersSantaLucia(w http.ResponseWriter, r *http.Request)
	// Simulate a simple PCR
	// (POST /pcr/simple_pcr)
	PostPcrSimplePcr(w http.ResponseWriter, r *http.Request)
	// Fragment CDS
	// (POST /synthesis/fragment)
	PostSynthesisFragment(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Fix CDS
// (POST /cds/fix)
func (_ Unimplemented) PostCdsFix(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Optimize CDS.
// (POST /cds/optimize)
func (_ Unimplemented) PostCdsOptimize(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Translate CDS
// (POST /cds/translate)
func (_ Unimplemented) PostCdsTranslate(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Simulate Golden Gate assembly
// (POST /cloning/goldengate)
func (_ Unimplemented) PostCloningGoldengate(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Simulate ligation
// (POST /cloning/ligate)
func (_ Unimplemented) PostCloningLigate(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Simulate restriction digest
// (POST /cloning/restriction_digest)
func (_ Unimplemented) PostCloningRestrictionDigest(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Run a lua script
// (POST /execute_lua)
func (_ Unimplemented) PostExecuteLua(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Parse FASTA data
// (POST /io/fasta/parse)
func (_ Unimplemented) PostIoFastaParse(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Write FASTA data
// (POST /io/fasta/write)
func (_ Unimplemented) PostIoFastaWrite(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Parse FASTQ data
// (POST /io/fastq/parse)
func (_ Unimplemented) PostIoFastqParse(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Write FASTQ data
// (POST /io/fastq/write)
func (_ Unimplemented) PostIoFastqWrite(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Parse Genbank data
// (POST /io/genbank/parse)
func (_ Unimplemented) PostIoGenbankParse(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Write Genbank data
// (POST /io/genbank/write)
func (_ Unimplemented) PostIoGenbankWrite(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Simulate PCR
// (POST /pcr/complex_pcr)
func (_ Unimplemented) PostPcrComplexPcr(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Generate De Bruijn sequence-based barcodes
// (POST /pcr/primers/debruijn_barcodes)
func (_ Unimplemented) PostPcrPrimersDebruijnBarcodes(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Calculate Melting Temperature using Marmur Doty method
// (POST /pcr/primers/marmur_doty)
func (_ Unimplemented) PostPcrPrimersMarmurDoty(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Calculate Melting Temperature
// (POST /pcr/primers/melting_temperature)
func (_ Unimplemented) PostPcrPrimersMeltingTemperature(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Calculate Melting Temperature using Santa Lucia method
// (POST /pcr/primers/santa_lucia)
func (_ Unimplemented) PostPcrPrimersSantaLucia(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Simulate a simple PCR
// (POST /pcr/simple_pcr)
func (_ Unimplemented) PostPcrSimplePcr(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fragment CDS
// (POST /synthesis/fragment)
func (_ Unimplemented) PostSynthesisFragment(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostCdsFix operation middleware
func (siw *ServerInterfaceWrapper) PostCdsFix(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCdsFix(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostCdsOptimize operation middleware
func (siw *ServerInterfaceWrapper) PostCdsOptimize(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCdsOptimize(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostCdsTranslate operation middleware
func (siw *ServerInterfaceWrapper) PostCdsTranslate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCdsTranslate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostCloningGoldengate operation middleware
func (siw *ServerInterfaceWrapper) PostCloningGoldengate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCloningGoldengate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostCloningLigate operation middleware
func (siw *ServerInterfaceWrapper) PostCloningLigate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCloningLigate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostCloningRestrictionDigest operation middleware
func (siw *ServerInterfaceWrapper) PostCloningRestrictionDigest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCloningRestrictionDigest(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostExecuteLua operation middleware
func (siw *ServerInterfaceWrapper) PostExecuteLua(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostExecuteLua(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostIoFastaParse operation middleware
func (siw *ServerInterfaceWrapper) PostIoFastaParse(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostIoFastaParse(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostIoFastaWrite operation middleware
func (siw *ServerInterfaceWrapper) PostIoFastaWrite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostIoFastaWrite(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostIoFastqParse operation middleware
func (siw *ServerInterfaceWrapper) PostIoFastqParse(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostIoFastqParse(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostIoFastqWrite operation middleware
func (siw *ServerInterfaceWrapper) PostIoFastqWrite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostIoFastqWrite(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostIoGenbankParse operation middleware
func (siw *ServerInterfaceWrapper) PostIoGenbankParse(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostIoGenbankParse(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostIoGenbankWrite operation middleware
func (siw *ServerInterfaceWrapper) PostIoGenbankWrite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostIoGenbankWrite(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostPcrComplexPcr operation middleware
func (siw *ServerInterfaceWrapper) PostPcrComplexPcr(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPcrComplexPcr(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostPcrPrimersDebruijnBarcodes operation middleware
func (siw *ServerInterfaceWrapper) PostPcrPrimersDebruijnBarcodes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPcrPrimersDebruijnBarcodes(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostPcrPrimersMarmurDoty operation middleware
func (siw *ServerInterfaceWrapper) PostPcrPrimersMarmurDoty(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPcrPrimersMarmurDoty(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostPcrPrimersMeltingTemperature operation middleware
func (siw *ServerInterfaceWrapper) PostPcrPrimersMeltingTemperature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPcrPrimersMeltingTemperature(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostPcrPrimersSantaLucia operation middleware
func (siw *ServerInterfaceWrapper) PostPcrPrimersSantaLucia(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPcrPrimersSantaLucia(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostPcrSimplePcr operation middleware
func (siw *ServerInterfaceWrapper) PostPcrSimplePcr(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPcrSimplePcr(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostSynthesisFragment operation middleware
func (siw *ServerInterfaceWrapper) PostSynthesisFragment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSynthesisFragment(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/cds/fix", wrapper.PostCdsFix)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/cds/optimize", wrapper.PostCdsOptimize)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/cds/translate", wrapper.PostCdsTranslate)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/cloning/goldengate", wrapper.PostCloningGoldengate)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/cloning/ligate", wrapper.PostCloningLigate)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/cloning/restriction_digest", wrapper.PostCloningRestrictionDigest)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/execute_lua", wrapper.PostExecuteLua)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/io/fasta/parse", wrapper.PostIoFastaParse)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/io/fasta/write", wrapper.PostIoFastaWrite)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/io/fastq/parse", wrapper.PostIoFastqParse)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/io/fastq/write", wrapper.PostIoFastqWrite)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/io/genbank/parse", wrapper.PostIoGenbankParse)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/io/genbank/write", wrapper.PostIoGenbankWrite)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/pcr/complex_pcr", wrapper.PostPcrComplexPcr)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/pcr/primers/debruijn_barcodes", wrapper.PostPcrPrimersDebruijnBarcodes)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/pcr/primers/marmur_doty", wrapper.PostPcrPrimersMarmurDoty)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/pcr/primers/melting_temperature", wrapper.PostPcrPrimersMeltingTemperature)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/pcr/primers/santa_lucia", wrapper.PostPcrPrimersSantaLucia)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/pcr/simple_pcr", wrapper.PostPcrSimplePcr)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/synthesis/fragment", wrapper.PostSynthesisFragment)
	})

	return r
}

type PostCdsFixRequestObject struct {
	Body *PostCdsFixJSONRequestBody
}

type PostCdsFixResponseObject interface {
	VisitPostCdsFixResponse(w http.ResponseWriter) error
}

type PostCdsFix200JSONResponse struct {
	Changes  []Change `json:"changes"`
	Sequence string   `json:"sequence"`
}

func (response PostCdsFix200JSONResponse) VisitPostCdsFixResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostCdsFix400TextResponse string

func (response PostCdsFix400TextResponse) VisitPostCdsFixResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

type PostCdsFix500TextResponse string

func (response PostCdsFix500TextResponse) VisitPostCdsFixResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type PostCdsOptimizeRequestObject struct {
	Body *PostCdsOptimizeJSONRequestBody
}

type PostCdsOptimizeResponseObject interface {
	VisitPostCdsOptimizeResponse(w http.ResponseWriter) error
}

type PostCdsOptimize200JSONResponse string

func (response PostCdsOptimize200JSONResponse) VisitPostCdsOptimizeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostCdsOptimize400TextResponse string

func (response PostCdsOptimize400TextResponse) VisitPostCdsOptimizeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

type PostCdsOptimize500TextResponse string

func (response PostCdsOptimize500TextResponse) VisitPostCdsOptimizeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type PostCdsTranslateRequestObject struct {
	Body *PostCdsTranslateJSONRequestBody
}

type PostCdsTranslateResponseObject interface {
	VisitPostCdsTranslateResponse(w http.ResponseWriter) error
}

type PostCdsTranslate200JSONResponse string

func (response PostCdsTranslate200JSONResponse) VisitPostCdsTranslateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostCdsTranslate500TextResponse string

func (response PostCdsTranslate500TextResponse) VisitPostCdsTranslateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type PostCloningGoldengateRequestObject struct {
	Body *PostCloningGoldengateJSONRequestBody
}

type PostCloningGoldengateResponseObject interface {
	VisitPostCloningGoldengateResponse(w http.ResponseWriter) error
}

type PostCloningGoldengate200Response struct {
}

func (response PostCloningGoldengate200Response) VisitPostCloningGoldengateResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostCloningGoldengate500TextResponse string

func (response PostCloningGoldengate500TextResponse) VisitPostCloningGoldengateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type PostCloningLigateRequestObject struct {
	Body *PostCloningLigateJSONRequestBody
}

type PostCloningLigateResponseObject interface {
	VisitPostCloningLigateResponse(w http.ResponseWriter) error
}

type PostCloningLigate200Response struct {
}

func (response PostCloningLigate200Response) VisitPostCloningLigateResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostCloningRestrictionDigestRequestObject struct {
	Body *PostCloningRestrictionDigestJSONRequestBody
}

type PostCloningRestrictionDigestResponseObject interface {
	VisitPostCloningRestrictionDigestResponse(w http.ResponseWriter) error
}

type PostCloningRestrictionDigest200Response struct {
}

func (response PostCloningRestrictionDigest200Response) VisitPostCloningRestrictionDigestResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostCloningRestrictionDigest500TextResponse string

func (response PostCloningRestrictionDigest500TextResponse) VisitPostCloningRestrictionDigestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type PostExecuteLuaRequestObject struct {
	Body *PostExecuteLuaJSONRequestBody
}

type PostExecuteLuaResponseObject interface {
	VisitPostExecuteLuaResponse(w http.ResponseWriter) error
}

type PostExecuteLua200JSONResponse struct {
	Log    string `json:"log"`
	Output string `json:"output"`
}

func (response PostExecuteLua200JSONResponse) VisitPostExecuteLuaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostExecuteLua500TextResponse string

func (response PostExecuteLua500TextResponse) VisitPostExecuteLuaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type PostIoFastaParseRequestObject struct {
	Body *PostIoFastaParseTextRequestBody
}

type PostIoFastaParseResponseObject interface {
	VisitPostIoFastaParseResponse(w http.ResponseWriter) error
}

type PostIoFastaParse200JSONResponse []FastaRecord

func (response PostIoFastaParse200JSONResponse) VisitPostIoFastaParseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostIoFastaParse500TextResponse string

func (response PostIoFastaParse500TextResponse) VisitPostIoFastaParseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type PostIoFastaWriteRequestObject struct {
	Body *PostIoFastaWriteJSONRequestBody
}

type PostIoFastaWriteResponseObject interface {
	VisitPostIoFastaWriteResponse(w http.ResponseWriter) error
}

type PostIoFastaWrite200Response struct {
}

func (response PostIoFastaWrite200Response) VisitPostIoFastaWriteResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostIoFastqParseRequestObject struct {
	Body *PostIoFastqParseTextRequestBody
}

type PostIoFastqParseResponseObject interface {
	VisitPostIoFastqParseResponse(w http.ResponseWriter) error
}

type PostIoFastqParse200JSONResponse []FastqRead

func (response PostIoFastqParse200JSONResponse) VisitPostIoFastqParseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostIoFastqWriteRequestObject struct {
	Body *PostIoFastqWriteJSONRequestBody
}

type PostIoFastqWriteResponseObject interface {
	VisitPostIoFastqWriteResponse(w http.ResponseWriter) error
}

type PostIoFastqWrite200Response struct {
}

func (response PostIoFastqWrite200Response) VisitPostIoFastqWriteResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostIoGenbankParseRequestObject struct {
	Body *PostIoGenbankParseTextRequestBody
}

type PostIoGenbankParseResponseObject interface {
	VisitPostIoGenbankParseResponse(w http.ResponseWriter) error
}

type PostIoGenbankParse200JSONResponse []GenbankRecord

func (response PostIoGenbankParse200JSONResponse) VisitPostIoGenbankParseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostIoGenbankParse500TextResponse string

func (response PostIoGenbankParse500TextResponse) VisitPostIoGenbankParseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type PostIoGenbankWriteRequestObject struct {
	Body *PostIoGenbankWriteJSONRequestBody
}

type PostIoGenbankWriteResponseObject interface {
	VisitPostIoGenbankWriteResponse(w http.ResponseWriter) error
}

type PostIoGenbankWrite200Response struct {
}

func (response PostIoGenbankWrite200Response) VisitPostIoGenbankWriteResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostPcrComplexPcrRequestObject struct {
	Body *PostPcrComplexPcrJSONRequestBody
}

type PostPcrComplexPcrResponseObject interface {
	VisitPostPcrComplexPcrResponse(w http.ResponseWriter) error
}

type PostPcrComplexPcr200JSONResponse []string

func (response PostPcrComplexPcr200JSONResponse) VisitPostPcrComplexPcrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostPcrComplexPcr500TextResponse string

func (response PostPcrComplexPcr500TextResponse) VisitPostPcrComplexPcrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type PostPcrPrimersDebruijnBarcodesRequestObject struct {
	Body *PostPcrPrimersDebruijnBarcodesJSONRequestBody
}

type PostPcrPrimersDebruijnBarcodesResponseObject interface {
	VisitPostPcrPrimersDebruijnBarcodesResponse(w http.ResponseWriter) error
}

type PostPcrPrimersDebruijnBarcodes200Response struct {
}

func (response PostPcrPrimersDebruijnBarcodes200Response) VisitPostPcrPrimersDebruijnBarcodesResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostPcrPrimersMarmurDotyRequestObject struct {
	Body *PostPcrPrimersMarmurDotyJSONRequestBody
}

type PostPcrPrimersMarmurDotyResponseObject interface {
	VisitPostPcrPrimersMarmurDotyResponse(w http.ResponseWriter) error
}

type PostPcrPrimersMarmurDoty200Response struct {
}

func (response PostPcrPrimersMarmurDoty200Response) VisitPostPcrPrimersMarmurDotyResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostPcrPrimersMeltingTemperatureRequestObject struct {
	Body *PostPcrPrimersMeltingTemperatureJSONRequestBody
}

type PostPcrPrimersMeltingTemperatureResponseObject interface {
	VisitPostPcrPrimersMeltingTemperatureResponse(w http.ResponseWriter) error
}

type PostPcrPrimersMeltingTemperature200Response struct {
}

func (response PostPcrPrimersMeltingTemperature200Response) VisitPostPcrPrimersMeltingTemperatureResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostPcrPrimersSantaLuciaRequestObject struct {
	Body *PostPcrPrimersSantaLuciaJSONRequestBody
}

type PostPcrPrimersSantaLuciaResponseObject interface {
	VisitPostPcrPrimersSantaLuciaResponse(w http.ResponseWriter) error
}

type PostPcrPrimersSantaLucia200Response struct {
}

func (response PostPcrPrimersSantaLucia200Response) VisitPostPcrPrimersSantaLuciaResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostPcrSimplePcrRequestObject struct {
	Body *PostPcrSimplePcrJSONRequestBody
}

type PostPcrSimplePcrResponseObject interface {
	VisitPostPcrSimplePcrResponse(w http.ResponseWriter) error
}

type PostPcrSimplePcr200JSONResponse string

func (response PostPcrSimplePcr200JSONResponse) VisitPostPcrSimplePcrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostPcrSimplePcr500TextResponse string

func (response PostPcrSimplePcr500TextResponse) VisitPostPcrSimplePcrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type PostSynthesisFragmentRequestObject struct {
	Body *PostSynthesisFragmentJSONRequestBody
}

type PostSynthesisFragmentResponseObject interface {
	VisitPostSynthesisFragmentResponse(w http.ResponseWriter) error
}

type PostSynthesisFragment200JSONResponse struct {
	Efficiency float32  `json:"efficiency"`
	Fragments  []string `json:"fragments"`
}

func (response PostSynthesisFragment200JSONResponse) VisitPostSynthesisFragmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSynthesisFragment500TextResponse string

func (response PostSynthesisFragment500TextResponse) VisitPostSynthesisFragmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Fix CDS
	// (POST /cds/fix)
	PostCdsFix(ctx context.Context, request PostCdsFixRequestObject) (PostCdsFixResponseObject, error)
	// Optimize CDS.
	// (POST /cds/optimize)
	PostCdsOptimize(ctx context.Context, request PostCdsOptimizeRequestObject) (PostCdsOptimizeResponseObject, error)
	// Translate CDS
	// (POST /cds/translate)
	PostCdsTranslate(ctx context.Context, request PostCdsTranslateRequestObject) (PostCdsTranslateResponseObject, error)
	// Simulate Golden Gate assembly
	// (POST /cloning/goldengate)
	PostCloningGoldengate(ctx context.Context, request PostCloningGoldengateRequestObject) (PostCloningGoldengateResponseObject, error)
	// Simulate ligation
	// (POST /cloning/ligate)
	PostCloningLigate(ctx context.Context, request PostCloningLigateRequestObject) (PostCloningLigateResponseObject, error)
	// Simulate restriction digest
	// (POST /cloning/restriction_digest)
	PostCloningRestrictionDigest(ctx context.Context, request PostCloningRestrictionDigestRequestObject) (PostCloningRestrictionDigestResponseObject, error)
	// Run a lua script
	// (POST /execute_lua)
	PostExecuteLua(ctx context.Context, request PostExecuteLuaRequestObject) (PostExecuteLuaResponseObject, error)
	// Parse FASTA data
	// (POST /io/fasta/parse)
	PostIoFastaParse(ctx context.Context, request PostIoFastaParseRequestObject) (PostIoFastaParseResponseObject, error)
	// Write FASTA data
	// (POST /io/fasta/write)
	PostIoFastaWrite(ctx context.Context, request PostIoFastaWriteRequestObject) (PostIoFastaWriteResponseObject, error)
	// Parse FASTQ data
	// (POST /io/fastq/parse)
	PostIoFastqParse(ctx context.Context, request PostIoFastqParseRequestObject) (PostIoFastqParseResponseObject, error)
	// Write FASTQ data
	// (POST /io/fastq/write)
	PostIoFastqWrite(ctx context.Context, request PostIoFastqWriteRequestObject) (PostIoFastqWriteResponseObject, error)
	// Parse Genbank data
	// (POST /io/genbank/parse)
	PostIoGenbankParse(ctx context.Context, request PostIoGenbankParseRequestObject) (PostIoGenbankParseResponseObject, error)
	// Write Genbank data
	// (POST /io/genbank/write)
	PostIoGenbankWrite(ctx context.Context, request PostIoGenbankWriteRequestObject) (PostIoGenbankWriteResponseObject, error)
	// Simulate PCR
	// (POST /pcr/complex_pcr)
	PostPcrComplexPcr(ctx context.Context, request PostPcrComplexPcrRequestObject) (PostPcrComplexPcrResponseObject, error)
	// Generate De Bruijn sequence-based barcodes
	// (POST /pcr/primers/debruijn_barcodes)
	PostPcrPrimersDebruijnBarcodes(ctx context.Context, request PostPcrPrimersDebruijnBarcodesRequestObject) (PostPcrPrimersDebruijnBarcodesResponseObject, error)
	// Calculate Melting Temperature using Marmur Doty method
	// (POST /pcr/primers/marmur_doty)
	PostPcrPrimersMarmurDoty(ctx context.Context, request PostPcrPrimersMarmurDotyRequestObject) (PostPcrPrimersMarmurDotyResponseObject, error)
	// Calculate Melting Temperature
	// (POST /pcr/primers/melting_temperature)
	PostPcrPrimersMeltingTemperature(ctx context.Context, request PostPcrPrimersMeltingTemperatureRequestObject) (PostPcrPrimersMeltingTemperatureResponseObject, error)
	// Calculate Melting Temperature using Santa Lucia method
	// (POST /pcr/primers/santa_lucia)
	PostPcrPrimersSantaLucia(ctx context.Context, request PostPcrPrimersSantaLuciaRequestObject) (PostPcrPrimersSantaLuciaResponseObject, error)
	// Simulate a simple PCR
	// (POST /pcr/simple_pcr)
	PostPcrSimplePcr(ctx context.Context, request PostPcrSimplePcrRequestObject) (PostPcrSimplePcrResponseObject, error)
	// Fragment CDS
	// (POST /synthesis/fragment)
	PostSynthesisFragment(ctx context.Context, request PostSynthesisFragmentRequestObject) (PostSynthesisFragmentResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHttpHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// PostCdsFix operation middleware
func (sh *strictHandler) PostCdsFix(w http.ResponseWriter, r *http.Request) {
	var request PostCdsFixRequestObject

	var body PostCdsFixJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostCdsFix(ctx, request.(PostCdsFixRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCdsFix")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostCdsFixResponseObject); ok {
		if err := validResponse.VisitPostCdsFixResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCdsOptimize operation middleware
func (sh *strictHandler) PostCdsOptimize(w http.ResponseWriter, r *http.Request) {
	var request PostCdsOptimizeRequestObject

	var body PostCdsOptimizeJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostCdsOptimize(ctx, request.(PostCdsOptimizeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCdsOptimize")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostCdsOptimizeResponseObject); ok {
		if err := validResponse.VisitPostCdsOptimizeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCdsTranslate operation middleware
func (sh *strictHandler) PostCdsTranslate(w http.ResponseWriter, r *http.Request) {
	var request PostCdsTranslateRequestObject

	var body PostCdsTranslateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostCdsTranslate(ctx, request.(PostCdsTranslateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCdsTranslate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostCdsTranslateResponseObject); ok {
		if err := validResponse.VisitPostCdsTranslateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCloningGoldengate operation middleware
func (sh *strictHandler) PostCloningGoldengate(w http.ResponseWriter, r *http.Request) {
	var request PostCloningGoldengateRequestObject

	var body PostCloningGoldengateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostCloningGoldengate(ctx, request.(PostCloningGoldengateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCloningGoldengate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostCloningGoldengateResponseObject); ok {
		if err := validResponse.VisitPostCloningGoldengateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCloningLigate operation middleware
func (sh *strictHandler) PostCloningLigate(w http.ResponseWriter, r *http.Request) {
	var request PostCloningLigateRequestObject

	var body PostCloningLigateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostCloningLigate(ctx, request.(PostCloningLigateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCloningLigate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostCloningLigateResponseObject); ok {
		if err := validResponse.VisitPostCloningLigateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCloningRestrictionDigest operation middleware
func (sh *strictHandler) PostCloningRestrictionDigest(w http.ResponseWriter, r *http.Request) {
	var request PostCloningRestrictionDigestRequestObject

	var body PostCloningRestrictionDigestJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostCloningRestrictionDigest(ctx, request.(PostCloningRestrictionDigestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCloningRestrictionDigest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostCloningRestrictionDigestResponseObject); ok {
		if err := validResponse.VisitPostCloningRestrictionDigestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostExecuteLua operation middleware
func (sh *strictHandler) PostExecuteLua(w http.ResponseWriter, r *http.Request) {
	var request PostExecuteLuaRequestObject

	var body PostExecuteLuaJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostExecuteLua(ctx, request.(PostExecuteLuaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostExecuteLua")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostExecuteLuaResponseObject); ok {
		if err := validResponse.VisitPostExecuteLuaResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostIoFastaParse operation middleware
func (sh *strictHandler) PostIoFastaParse(w http.ResponseWriter, r *http.Request) {
	var request PostIoFastaParseRequestObject

	data, err := io.ReadAll(r.Body)
	if err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't read body: %w", err))
		return
	}
	body := PostIoFastaParseTextRequestBody(data)
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostIoFastaParse(ctx, request.(PostIoFastaParseRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostIoFastaParse")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostIoFastaParseResponseObject); ok {
		if err := validResponse.VisitPostIoFastaParseResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostIoFastaWrite operation middleware
func (sh *strictHandler) PostIoFastaWrite(w http.ResponseWriter, r *http.Request) {
	var request PostIoFastaWriteRequestObject

	var body PostIoFastaWriteJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostIoFastaWrite(ctx, request.(PostIoFastaWriteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostIoFastaWrite")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostIoFastaWriteResponseObject); ok {
		if err := validResponse.VisitPostIoFastaWriteResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostIoFastqParse operation middleware
func (sh *strictHandler) PostIoFastqParse(w http.ResponseWriter, r *http.Request) {
	var request PostIoFastqParseRequestObject

	data, err := io.ReadAll(r.Body)
	if err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't read body: %w", err))
		return
	}
	body := PostIoFastqParseTextRequestBody(data)
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostIoFastqParse(ctx, request.(PostIoFastqParseRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostIoFastqParse")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostIoFastqParseResponseObject); ok {
		if err := validResponse.VisitPostIoFastqParseResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostIoFastqWrite operation middleware
func (sh *strictHandler) PostIoFastqWrite(w http.ResponseWriter, r *http.Request) {
	var request PostIoFastqWriteRequestObject

	var body PostIoFastqWriteJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostIoFastqWrite(ctx, request.(PostIoFastqWriteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostIoFastqWrite")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostIoFastqWriteResponseObject); ok {
		if err := validResponse.VisitPostIoFastqWriteResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostIoGenbankParse operation middleware
func (sh *strictHandler) PostIoGenbankParse(w http.ResponseWriter, r *http.Request) {
	var request PostIoGenbankParseRequestObject

	data, err := io.ReadAll(r.Body)
	if err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't read body: %w", err))
		return
	}
	body := PostIoGenbankParseTextRequestBody(data)
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostIoGenbankParse(ctx, request.(PostIoGenbankParseRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostIoGenbankParse")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostIoGenbankParseResponseObject); ok {
		if err := validResponse.VisitPostIoGenbankParseResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostIoGenbankWrite operation middleware
func (sh *strictHandler) PostIoGenbankWrite(w http.ResponseWriter, r *http.Request) {
	var request PostIoGenbankWriteRequestObject

	var body PostIoGenbankWriteJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostIoGenbankWrite(ctx, request.(PostIoGenbankWriteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostIoGenbankWrite")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostIoGenbankWriteResponseObject); ok {
		if err := validResponse.VisitPostIoGenbankWriteResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostPcrComplexPcr operation middleware
func (sh *strictHandler) PostPcrComplexPcr(w http.ResponseWriter, r *http.Request) {
	var request PostPcrComplexPcrRequestObject

	var body PostPcrComplexPcrJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostPcrComplexPcr(ctx, request.(PostPcrComplexPcrRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPcrComplexPcr")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostPcrComplexPcrResponseObject); ok {
		if err := validResponse.VisitPostPcrComplexPcrResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostPcrPrimersDebruijnBarcodes operation middleware
func (sh *strictHandler) PostPcrPrimersDebruijnBarcodes(w http.ResponseWriter, r *http.Request) {
	var request PostPcrPrimersDebruijnBarcodesRequestObject

	var body PostPcrPrimersDebruijnBarcodesJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostPcrPrimersDebruijnBarcodes(ctx, request.(PostPcrPrimersDebruijnBarcodesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPcrPrimersDebruijnBarcodes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostPcrPrimersDebruijnBarcodesResponseObject); ok {
		if err := validResponse.VisitPostPcrPrimersDebruijnBarcodesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostPcrPrimersMarmurDoty operation middleware
func (sh *strictHandler) PostPcrPrimersMarmurDoty(w http.ResponseWriter, r *http.Request) {
	var request PostPcrPrimersMarmurDotyRequestObject

	var body PostPcrPrimersMarmurDotyJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostPcrPrimersMarmurDoty(ctx, request.(PostPcrPrimersMarmurDotyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPcrPrimersMarmurDoty")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostPcrPrimersMarmurDotyResponseObject); ok {
		if err := validResponse.VisitPostPcrPrimersMarmurDotyResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostPcrPrimersMeltingTemperature operation middleware
func (sh *strictHandler) PostPcrPrimersMeltingTemperature(w http.ResponseWriter, r *http.Request) {
	var request PostPcrPrimersMeltingTemperatureRequestObject

	var body PostPcrPrimersMeltingTemperatureJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostPcrPrimersMeltingTemperature(ctx, request.(PostPcrPrimersMeltingTemperatureRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPcrPrimersMeltingTemperature")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostPcrPrimersMeltingTemperatureResponseObject); ok {
		if err := validResponse.VisitPostPcrPrimersMeltingTemperatureResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostPcrPrimersSantaLucia operation middleware
func (sh *strictHandler) PostPcrPrimersSantaLucia(w http.ResponseWriter, r *http.Request) {
	var request PostPcrPrimersSantaLuciaRequestObject

	var body PostPcrPrimersSantaLuciaJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostPcrPrimersSantaLucia(ctx, request.(PostPcrPrimersSantaLuciaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPcrPrimersSantaLucia")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostPcrPrimersSantaLuciaResponseObject); ok {
		if err := validResponse.VisitPostPcrPrimersSantaLuciaResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostPcrSimplePcr operation middleware
func (sh *strictHandler) PostPcrSimplePcr(w http.ResponseWriter, r *http.Request) {
	var request PostPcrSimplePcrRequestObject

	var body PostPcrSimplePcrJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostPcrSimplePcr(ctx, request.(PostPcrSimplePcrRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPcrSimplePcr")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostPcrSimplePcrResponseObject); ok {
		if err := validResponse.VisitPostPcrSimplePcrResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSynthesisFragment operation middleware
func (sh *strictHandler) PostSynthesisFragment(w http.ResponseWriter, r *http.Request) {
	var request PostSynthesisFragmentRequestObject

	var body PostSynthesisFragmentJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostSynthesisFragment(ctx, request.(PostSynthesisFragmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSynthesisFragment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostSynthesisFragmentResponseObject); ok {
		if err := validResponse.VisitPostSynthesisFragmentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
